%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1508.m00.i121.n016.P.c25.273308033 Sticky stars vector badge set.eps
%%Creator: Adobe Illustrator(R) 18.1
%%For: ??????? ??????
%%CreationDate: 8/13/2015
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.1.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 18.1.1 x446 R agm 4.7721 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c014 79.156821, 2014/08/29-03:07:50        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmp:ModifyDate>2015-08-12T13:53:52+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-08-12T13:53:51+03:00</xmp:CreateDate>
         <xmp:MetadataDate>2015-08-12T13:53:52+03:00</xmp:MetadataDate>
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A4tirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirgCTQdcVR9po9&#xA;1OnrFSsEVzFa3Rp8cTS148lNOvBvpG/bFUyPkjWfUjtvTpeS6pLo6xHYCeAJ6nJuwX1BXwG+KpHL&#xA;bSJH6wBNuztHFMRQOUoTSvgGFfCuKqWKuxV2KuxV2KuxVdDDLNKkMKNJNIwSONAWZmY0CqBuSTir&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:DocumentID>xmp.did:3B8873E6DF40E511A63FE36FCCA58D29</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:3B8873E6DF40E511A63FE36FCCA58D29</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:1bb0f6be-76da-402c-9c49-9ecdf601cd18</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:3A8873E6DF40E511A63FE36FCCA58D29</stRef:instanceID>
            <stRef:documentID>xmp.did:3A8873E6DF40E511A63FE36FCCA58D29</stRef:documentID>
            <stRef:originalDocumentID>uuid:1bb0f6be-76da-402c-9c49-9ecdf601cd18</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8D5FB0211D40E5119D63E6CB5A87C3F0</stEvt:instanceID>
                  <stEvt:when>2015-08-11T17:51:11+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:398873E6DF40E511A63FE36FCCA58D29</stEvt:instanceID>
                  <stEvt:when>2015-08-12T13:50:09+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3A8873E6DF40E511A63FE36FCCA58D29</stEvt:instanceID>
                  <stEvt:when>2015-08-12T13:53:42+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3B8873E6DF40E511A63FE36FCCA58D29</stEvt:instanceID>
                  <stEvt:when>2015-08-12T13:53:52+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Untitlagsfsafed-2</rdf:li>
            </rdf:Alt>
         </dc:title>
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.190582 .190582 .190582 rgb
f
67.6406 394.762 mo
69.5054 386.236 63.4551 380.571 54.708 382.966 cv
49.9556 375.24 41.6665 375.246 37.2051 382.746 cv
28.7388 380.984 23.1226 386.94 25.4521 395.553 cv
17.8682 400.248 17.9019 408.434 25.2871 412.931 cv
23.4209 421.457 29.4717 427.123 38.2207 424.727 cv
42.9717 432.452 51.2603 432.447 55.7222 424.947 cv
64.188 426.709 69.8047 420.755 67.4741 412.142 cv
75.0596 407.444 75.0259 399.259 67.6406 394.762 cv
cp
1 1 1 rgb
f
347.821 396.334 mo
346.82 396.249 345.522 394.151 346.657 392.388 cv
347.337 391.33 348.012 390.329 346.963 388.519 cv
346.169 387.149 345.234 387.332 344.303 387.638 cv
342.66 388.178 342.077 385.81 342.058 383.921 cv
342.047 382.882 341.556 382.025 339.74 382.044 cv
338.713 382.055 338.241 382.87 337.701 383.698 cv
336.869 384.974 334.1 385.388 333.57 384.001 cv
333.042 382.614 330.535 382.488 328.893 383.637 cv
327.252 384.784 325.426 384.31 325.258 384.064 cv
325.09 383.819 324.943 383.621 324.889 383.648 cv
324.833 383.675 324.376 382.793 323.373 382.467 cv
322.883 382.307 322.284 382.337 321.514 382.649 cv
318.535 383.86 319.861 386.693 318.814 388.744 cv
317.435 391.448 315.906 388.463 313.342 389.147 cv
311.478 389.644 310.03 391.948 310.09 394.395 cv
310.143 396.568 313.101 399.086 312.744 400.651 cv
312.449 401.951 309.361 400.027 308.115 403.847 cv
307.721 405.058 307.891 406.128 308.188 407.542 cv
308.796 410.427 310.321 409.223 311.453 410.491 cv
312.832 412.034 313.008 413.583 311.703 415.426 cv
308.935 419.338 312.154 422.12 316.032 421.557 cv
318.107 421.255 321.494 420.427 320.949 421.912 cv
320.6 422.865 319.819 423.958 320.389 424.58 cv
323.134 427.578 325.207 422.61 327.842 422.766 cv
327.933 422.771 328.018 422.782 328.098 422.797 cv
328.237 422.824 328.543 422.991 328.789 423.149 cv
329.033 423.309 329.321 423.474 329.413 423.551 cv
329.505 423.628 329.851 424.606 330.738 425.192 cv
331.197 425.495 331.79 425.668 332.58 425.647 cv
334.014 425.612 336.083 425.036 336.975 423.692 cv
337.244 423.289 337.273 422.6 337.319 421.974 cv
337.391 420.999 339.436 421.805 341.52 422.056 cv
344.455 422.411 347.157 420.692 345.795 416.442 cv
345.707 416.171 345.582 415.938 345.434 415.726 cv
345.18 415.36 345.082 414.708 345.465 414.358 cv
345.678 414.165 345.954 414.036 346.331 414.111 cv
350.185 414.886 353.001 413.655 351.845 410.138 cv
351.247 408.321 347.335 407.528 350.388 406.556 cv
351.5 406.202 352.672 405.791 353.435 404.273 cv
355.133 400.908 353.941 395.661 349.637 396.292 cv
349.109 396.37 348.467 396.388 347.821 396.334 cv
cp
f
355.813 116.783 mo
360.944 113.652 359.93 110.297 353.928 110.505 cv
358.074 106.153 356.227 103.176 350.482 104.93 cv
353.362 99.6519 350.806 97.2563 345.711 100.438 cv
347.126 94.5942 344.037 92.9409 339.94 97.3315 cv
339.793 91.2651 336.316 90.5044 333.479 95.9751 cv
331.766 90.0571 328.209 90.1226 326.88 96.0435 cv
323.72 90.937 320.367 91.9556 320.612 97.9624 cv
316.237 93.8472 313.264 95.6997 315.057 101.438 cv
309.765 98.5952 307.371 101.154 310.588 106.231 cv
304.741 104.856 303.092 107.946 307.514 112.02 cv
301.569 112.203 300.733 115.55 305.89 118.325 cv
300.291 120.039 300.456 123.485 306.251 124.825 cv
301.118 127.956 302.134 131.31 308.136 131.102 cv
303.989 135.455 305.837 138.431 311.581 136.677 cv
308.702 141.955 311.258 144.351 316.352 141.17 cv
314.938 147.013 318.026 148.667 322.124 144.276 cv
322.27 150.342 325.747 151.102 328.584 145.631 cv
330.297 151.549 333.854 151.484 335.184 145.563 cv
338.344 150.669 341.696 149.651 341.45 143.644 cv
345.824 147.76 348.799 145.908 347.006 140.169 cv
352.298 143.012 354.691 140.454 351.476 135.376 cv
357.32 136.752 358.971 133.662 354.55 129.588 cv
360.495 129.406 361.329 126.057 356.173 123.283 cv
361.772 121.569 361.607 118.122 355.813 116.783 cv
cp
f
74.9507 44.6445 mo
61.5542 45.6592 61.0425 43.9678 72.7832 37.4292 cv
60.1064 41.877 59.1743 40.3755 68.8232 31.021 cv
57.729 38.5981 56.4395 37.3887 63.3384 25.8564 cv
54.583 36.0459 53.0254 35.2119 56.7046 22.2866 cv
50.8838 34.3657 49.1304 33.9829 49.2788 20.7275 cv
46.835 33.7568 45.04 33.79 41.6919 20.8062 cv
42.7749 34.2007 41.084 34.7148 34.4883 23.0112 cv
39.0015 35.6694 37.501 36.6035 28.1006 27.0054 cv
35.7358 38.064 34.5283 39.3545 22.9644 32.5171 cv
33.2017 41.2222 32.3691 42.7817 19.4297 39.1699 cv
31.6011 44.9282 31.1797 46.6172 17.563 46.417 cv
30.9565 48.8809 31.0396 50.6201 17.9775 53.8901 cv
31.374 52.8755 31.8862 54.5674 20.145 61.1055 cv
32.8223 56.6582 33.7544 58.1597 24.1055 67.5142 cv
35.1997 59.937 36.4888 61.146 29.5903 72.6792 cv
38.3452 62.4893 39.9033 63.3232 36.2246 76.2485 cv
42.0444 64.1685 43.7983 64.5518 43.6499 77.8076 cv
46.0933 64.7783 47.8882 64.7446 51.2368 77.729 cv
50.1528 64.3335 51.8442 63.8198 58.4404 75.5239 cv
53.9268 62.8657 55.4272 61.9316 64.8276 71.5298 cv
57.1919 60.4707 58.3994 59.1802 69.9639 66.0181 cv
59.7261 57.3125 60.5586 55.7534 73.4985 59.3652 cv
61.3276 53.6069 61.7485 51.918 75.3647 52.1177 cv
61.9717 49.6538 61.8887 47.9146 74.9507 44.6445 cv
cp
f
46.4775 350.86 mo
44.2568 350.862 42.2793 347.598 40.1899 347.344 cv
37.9683 347.072 35.2441 349.74 33.2271 349.211 cv
31.0366 348.636 30.0249 344.962 28.1455 344.12 cv
26.0444 343.179 22.5728 344.772 20.9565 343.555 cv
19.0889 342.147 19.8491 338.478 18.7715 336.784 cv
17.5566 334.876 13.9976 333.659 13.9961 331.509 cv
13.9941 329.357 17.5527 328.136 18.7646 326.225 cv
19.8398 324.53 19.0757 320.86 20.9409 319.451 cv
22.5562 318.231 26.0298 319.82 28.1289 318.876 cv
30.0063 318.032 31.0117 314.358 33.2007 313.778 cv
35.2163 313.246 37.9448 315.91 40.1665 315.636 cv
42.2549 315.378 44.228 312.11 46.4502 312.109 cv
48.6709 312.107 50.6484 315.372 52.7378 315.626 cv
54.9595 315.897 57.6836 313.229 59.7007 313.759 cv
61.8911 314.334 62.9023 318.008 64.7822 318.85 cv
66.8833 319.791 70.3545 318.197 71.9722 319.415 cv
73.8389 320.822 73.0786 324.493 74.1563 326.185 cv
75.3706 328.094 78.9297 329.31 78.9316 331.461 cv
78.9336 333.612 75.375 334.835 74.1626 336.745 cv
73.0879 338.44 73.8521 342.109 71.9868 343.519 cv
70.3711 344.739 66.8979 343.149 64.7988 344.094 cv
62.9209 344.939 61.916 348.611 59.7266 349.191 cv
57.7114 349.724 54.9829 347.06 52.7607 347.334 cv
50.6729 347.593 48.6997 350.859 46.4775 350.86 cv
cp
f
117.055 287.525 mo
114.717 287.527 112.964 282.873 110.8 282.355 cv
108.543 281.814 104.86 285.139 102.872 284.104 cv
100.824 283.04 101.447 278.114 99.772 276.61 cv
98.0645 275.076 93.2246 276.19 91.9971 274.287 cv
90.7646 272.377 93.7905 268.463 93.1343 266.268 cv
92.4946 264.123 87.8057 262.5 87.8032 260.167 cv
87.8008 257.832 92.4897 256.202 93.1255 254.058 cv
93.7783 251.86 90.7466 247.951 91.9766 246.039 cv
93.2017 244.134 98.043 245.24 99.7485 243.704 cv
101.421 242.197 100.791 237.271 102.837 236.205 cv
104.824 235.169 108.511 238.487 110.767 237.944 cv
112.93 237.422 114.677 232.766 117.015 232.764 cv
119.352 232.762 121.105 237.417 123.269 237.935 cv
125.526 238.477 129.209 235.151 131.198 236.186 cv
133.245 237.249 132.622 242.176 134.298 243.679 cv
136.005 245.213 140.845 244.099 142.073 246.002 cv
143.306 247.912 140.28 251.826 140.936 254.021 cv
141.576 256.167 146.265 257.789 146.268 260.123 cv
146.269 262.458 141.581 264.087 140.944 266.232 cv
140.292 268.429 143.323 272.338 142.094 274.25 cv
140.869 276.156 136.027 275.05 134.322 276.585 cv
132.648 278.092 133.279 283.018 131.232 284.084 cv
129.246 285.12 125.558 281.802 123.302 282.346 cv
121.14 282.867 119.394 287.523 117.055 287.525 cv
cp
f
187.112 433.366 mo
181.389 423.843 li
171.945 429.705 li
171.354 418.619 li
160.26 419.149 li
165.377 409.318 li
155.725 403.869 li
165.37 398.406 li
160.238 388.581 li
171.333 389.096 li
171.908 378.009 li
181.359 383.857 li
187.069 374.326 li
192.792 383.85 li
202.235 377.987 li
202.826 389.072 li
213.92 388.542 li
208.803 398.373 li
218.456 403.823 li
208.811 409.285 li
213.943 419.11 li
202.849 418.596 li
202.272 429.683 li
192.823 423.834 li
187.112 433.366 li
cp
f
113.874 142.786 mo
112.71 140.85 110.21 140.246 108.292 141.438 cv
103.042 144.697 li
102.712 138.539 li
102.594 136.283 100.665 134.541 98.4087 134.648 cv
92.2446 134.943 li
95.0845 129.489 li
96.1284 127.484 95.3784 124.959 93.4116 123.849 cv
88.0542 120.824 li
93.4058 117.793 li
95.3726 116.68 96.1187 114.153 95.0708 112.15 cv
92.2241 106.699 li
98.3892 106.986 li
100.644 107.09 102.571 105.346 102.689 103.09 cv
103.007 96.9297 li
108.26 100.182 li
110.182 101.371 112.679 100.764 113.842 98.8252 cv
117.014 93.5273 li
120.196 98.8203 li
121.36 100.758 123.86 101.361 125.779 100.169 cv
131.028 96.9102 li
131.357 103.068 li
131.478 105.324 133.405 107.065 135.663 106.957 cv
141.826 106.663 li
138.986 112.117 li
137.943 114.122 138.692 116.648 140.66 117.758 cv
146.016 120.782 li
140.665 123.814 li
138.699 124.927 137.955 127.453 138.999 129.456 cv
141.847 134.907 li
135.682 134.621 li
133.426 134.517 131.499 136.262 131.381 138.518 cv
131.063 144.676 li
125.81 141.426 li
123.888 140.236 121.391 140.843 120.229 142.781 cv
117.056 148.079 li
113.874 142.786 li
cp
f
106.796 209.226 mo
106.137 207.904 105.476 206.583 104.155 205.923 cv
101.512 205.262 99.5308 207.904 98.2095 209.226 cv
97.5493 205.262 99.5308 201.299 97.5493 197.335 cv
95.5679 195.355 92.9248 197.996 90.9429 197.996 cv
91.604 194.033 96.8877 191.39 94.9063 186.767 cv
94.2466 185.445 92.2646 184.124 89.6221 184.124 cv
92.2646 182.143 95.5679 180.821 98.2095 178.84 cv
101.512 176.198 98.2095 173.555 96.8877 171.573 cv
100.851 170.913 104.815 172.895 108.778 170.913 cv
110.76 169.591 108.778 166.289 109.439 164.308 cv
112.082 166.289 115.385 168.271 118.027 169.591 cv
121.33 170.913 123.311 166.95 123.311 164.308 cv
125.293 166.289 126.613 168.271 127.275 170.913 cv
127.934 172.234 128.595 173.555 129.916 174.215 cv
132.559 174.876 134.54 172.234 135.861 170.913 cv
135.861 174.215 135.202 177.519 135.861 180.821 cv
136.522 185.445 141.147 182.803 143.788 182.143 cv
141.806 185.445 139.165 189.409 138.503 193.372 cv
140.486 194.033 142.468 195.355 144.449 196.014 cv
141.806 197.996 138.503 199.317 135.861 201.299 cv
132.559 203.941 135.861 207.245 137.843 208.565 cv
133.879 209.226 129.257 207.245 125.293 209.226 cv
123.311 210.547 125.293 213.85 124.632 215.831 cv
121.33 214.51 119.348 211.869 116.044 210.547 cv
112.741 209.887 110.76 213.189 110.76 215.831 cv
109.439 213.85 108.118 211.208 106.796 209.226 cv
106.796 209.226 li
cp
f
399.995 354.298 mo
399.296 349.933 396.995 349.378 394.201 352.898 cv
395.227 350.476 390.395 353.473 388.753 356.281 cv
390.395 353.473 390.095 347.808 388.412 349.891 cv
389.983 345.73 388.21 344.126 383.944 345.853 cv
386.132 344.227 380.461 344.498 377.548 346.16 cv
380.461 344.498 383.073 339.477 380.495 340.498 cv
384.034 337.633 383.345 335.31 378.759 334.645 cv
381.534 334.287 376.604 331.506 373.199 331.508 cv
376.604 331.506 381.528 328.716 378.753 328.36 cv
383.339 327.69 384.023 325.364 380.481 322.506 cv
383.06 323.522 380.442 318.505 377.526 316.849 cv
380.442 318.505 386.115 318.768 383.924 317.144 cv
388.191 318.864 389.963 317.26 388.385 313.102 cv
390.07 315.183 390.365 309.514 388.719 306.71 cv
390.365 309.514 395.199 312.508 394.168 310.084 cv
396.968 313.603 399.268 313.042 399.961 308.676 cv
400.336 311.258 403.256 306.383 403.254 303.179 cv
403.256 306.383 406.184 311.255 406.556 308.672 cv
407.255 313.036 409.555 313.592 412.349 310.071 cv
411.322 312.494 416.153 309.496 417.797 306.69 cv
416.153 309.496 416.455 315.163 418.138 313.079 cv
416.567 317.239 418.34 318.844 422.605 317.116 cv
420.418 318.744 426.091 318.472 429.004 316.811 cv
426.091 318.472 423.477 323.491 426.056 322.471 cv
422.518 325.336 423.205 327.661 427.793 328.325 cv
425.017 328.683 429.945 331.466 433.351 331.463 cv
429.945 331.466 425.021 334.255 427.797 334.607 cv
423.212 335.279 422.526 337.605 426.068 340.465 cv
423.487 339.448 426.11 344.465 429.023 346.122 cv
426.11 344.465 420.436 344.202 422.626 345.823 cv
418.358 344.104 416.587 345.712 418.165 349.868 cv
416.479 347.788 416.185 353.454 417.833 356.26 cv
416.185 353.454 411.351 350.464 412.382 352.886 cv
409.582 349.367 407.282 349.928 406.59 354.292 cv
406.215 351.71 403.294 356.586 403.296 359.791 cv
403.294 356.586 400.367 351.716 399.995 354.298 cv
cp
f
102.945 327.313 mo
115.467 330.493 97.6943 311.875 97.6943 311.875 cv
109.059 320.936 li
114.754 325.684 113.926 323.441 113.58 317.942 cv
112.123 305.646 li
116.879 317.74 li
118.197 321.079 120.582 321.467 121.838 316.757 cv
127.307 303.441 li
125.803 318.048 li
125.194 323.059 126.574 321.6 131.368 317.166 cv
144.479 305.747 li
133.59 319.31 li
130.438 323.698 128.1 325.993 132.317 326.396 cv
147.412 325.647 li
134.377 328.811 li
126.986 331.525 132.256 333.132 139.143 335.821 cv
147.797 339.68 li
136.847 337.485 li
128.645 335.206 126.447 336.646 132.246 343.285 cv
142.378 354.637 li
130.855 345.797 li
128.391 343.519 124.072 341.639 124.271 345.482 cv
125.573 359.528 li
121.23 345.395 li
120.232 341.705 119.086 341.579 117.271 347.403 cv
113.504 358.835 li
114.326 348.505 li
114.572 342.103 113.631 341.828 109.48 345.228 cv
97.666 354.639 li
106.499 343.307 li
109.24 340.116 110.273 337.788 106.736 337.565 cv
92.04 339.933 li
102.184 335.703 li
105.459 334.235 109.721 333.134 101.879 330.098 cv
86.2734 323.73 li
102.945 327.313 li
cp
f
395.632 180.811 mo
396.813 179.609 392.163 161.439 392.163 161.439 cv
397.502 173.169 li
401.032 180.301 403.392 179.157 405.176 174.094 cv
408.904 164.346 li
408.154 174.18 li
407.868 178.059 408.943 180.518 413.771 175.307 cv
422.564 166.813 li
415.589 177.365 li
413.97 180.276 411.039 184.914 420.548 182.995 cv
430.603 181.677 li
421.56 185.985 li
416.018 187.631 414.504 190.083 419.787 192.068 cv
429.324 196.999 li
418.612 195.595 li
413.491 194.66 416.509 197.314 422.446 203.585 cv
429.777 211.531 li
419.48 203.968 li
412.01 197.715 408.352 197.303 412.602 207.019 cv
415.578 217.605 li
410.234 208.643 li
407.411 203.959 405.026 198.265 402.96 207.414 cv
399.649 218.701 li
400.605 203.412 li
400.992 199.487 398.816 199.581 396.253 202.387 cv
387.322 210.395 li
393.248 201.394 li
397.596 194.877 392.966 195.624 386.259 196.637 cv
375.946 197.854 li
384.6 194.596 li
392.191 192.09 392.356 190.829 388.846 188.838 cv
378.55 184.731 li
386.27 185.382 li
390.156 185.674 394.793 186.342 387.975 179.568 cv
376.81 168.443 li
376.81 168.443 393.712 182.762 395.632 180.811 cv
cp
f
272.597 189.266 mo
273.385 189.017 291.123 185.626 291.123 185.626 cv
291.123 185.626 277.992 186.305 273.071 185.785 cv
273.667 185.512 291.123 178.182 291.123 178.182 cv
281.455 180.654 li
273.764 182.735 272.618 182.836 272.618 182.836 cv
289.153 168.162 li
269.669 180.887 li
283.432 162.852 li
267.218 179.456 li
273.366 161.96 li
264.842 177.862 li
265.608 159.544 li
265.608 159.544 263.388 169.912 261.788 179.473 cv
261.788 177.602 256.965 159.544 256.965 159.544 cv
256.965 159.544 258.563 172.47 259.306 179.772 cv
259.111 179.515 250.873 163.153 250.873 163.153 cv
250.873 163.153 256.715 179.972 256.864 180.612 cv
255.842 179.506 245.29 166.25 245.29 166.25 cv
245.29 166.25 254.102 182.097 254.243 182.778 cv
254.048 182.661 240.161 170.595 240.161 170.595 cv
240.161 170.595 252.957 185.073 252.755 184.986 cv
234.84 175.126 li
250.892 186.624 li
230.823 184.215 li
230.823 184.215 240.912 186.953 251.158 188.807 cv
230.823 191.975 li
230.823 191.975 248.188 191.78 250.77 192.356 cv
249.495 193.749 232.678 201.532 232.678 201.532 cv
251.237 194.962 li
232.784 212.842 li
254.243 197.652 li
239.585 218.45 li
257.523 199.723 li
257.331 205.458 255.51 220.595 255.51 220.595 cv
260.974 200.184 li
263.891 218.45 li
263.891 218.45 263.343 200.62 263.759 199.855 cv
267.617 207.32 273.543 218.45 273.543 218.45 cv
266.64 198.479 li
279.242 212.367 li
279.242 212.367 269.405 197.561 269.116 196.86 cv
284.566 207.187 li
276.542 199.032 li
275.184 197.81 272.421 195.859 271.965 195.12 cv
290.417 203.633 li
272.756 192.747 li
290.277 193.128 li
272.597 189.266 li
cp
f
259.501 276.691 mo
258.556 275.12 256.527 274.631 254.97 275.598 cv
246.771 284.676 li
250.442 273.245 li
250.346 271.414 248.781 270.001 246.95 270.089 cv
241.948 270.328 li
244.253 265.901 li
245.1 264.275 244.492 262.227 242.895 261.324 cv
229.803 258.853 li
242.891 256.412 li
244.486 255.507 245.091 253.458 244.242 251.832 cv
241.932 247.41 li
246.934 247.642 li
248.766 247.726 250.328 246.311 250.423 244.48 cv
247.141 231.188 li
254.944 242.12 li
256.504 243.086 258.531 242.593 259.474 241.02 cv
262.048 236.72 li
264.63 241.017 li
265.574 242.587 267.602 243.077 269.16 242.11 cv
276.651 233.401 li
273.686 244.463 li
273.784 246.294 275.349 247.706 277.18 247.619 cv
282.183 247.38 li
279.878 251.806 li
279.031 253.433 279.639 255.481 281.235 256.382 cv
292.144 258.853 li
281.239 261.296 li
279.645 262.2 279.039 264.25 279.888 265.876 cv
282.198 270.298 li
277.196 270.066 li
275.365 269.981 273.803 271.397 273.708 273.228 cv
279.311 289.102 li
269.185 275.587 li
267.627 274.622 265.599 275.115 264.656 276.688 cv
262.082 280.986 li
259.501 276.691 li
cp
f
269.491 46.646 mo
277.936 40.208 282.29 37.2515 290.436 31.7495 cv
280.434 35.6724 271.275 37.8193 264.691 39.5093 cv
265.414 32.8306 265.755 26.2422 266.359 21.8369 cv
264.384 24.8447 257.868 37.708 255.989 39.3818 cv
252.239 36.103 250.318 33.8643 247.725 31.3711 cv
248.301 34.8789 247.895 38.3813 248.059 43.3872 cv
240.785 42.4761 232.316 41.2964 221.69 39.6978 cv
230.858 43.249 237.382 47.0918 244.931 50.3608 cv
241.423 53.8442 239.314 56.7529 232.308 62.8018 cv
238.061 61.0752 241.589 60.3091 249.953 57.7373 cv
250.086 62.397 250.697 70.0713 250.506 76.6978 cv
252.48 73.6909 256.008 63.269 258.211 59.0981 cv
261.913 62.4922 263.761 63.7046 267.253 67.4971 cv
266.679 63.9893 265.412 60.5718 264.581 55.8354 cv
265.797 55.7104 271.551 56.2402 290.41 58.498 cv
280.477 53.1387 277.272 50.5737 269.491 46.646 cv
cp
f
117.048 421.181 mo
100.435 421.194 86.9604 413.443 86.9541 403.869 cv
86.9468 394.295 100.409 386.523 117.023 386.512 cv
133.636 386.5 147.109 394.25 147.117 403.823 cv
147.123 413.398 133.662 421.17 117.048 421.181 cv
cp
f
260.988 352.048 mo
259.088 345.845 li
256.732 351.89 li
255.314 345.56 li
252.488 351.399 li
251.59 344.975 li
248.279 350.554 li
247.957 344.076 li
244.139 349.321 li
244.463 342.843 li
240.1 347.645 li
241.191 341.253 li
236.236 345.44 li
238.26 339.281 li
232.666 342.564 li
235.865 336.934 li
229.668 338.82 li
234.277 334.288 li
227.816 334.105 li
233.729 331.506 li
227.813 328.912 li
234.273 328.721 li
229.658 324.193 li
235.859 326.071 li
232.652 320.446 li
238.25 323.721 li
236.219 317.565 li
241.178 321.745 li
240.08 315.354 li
244.447 320.151 li
244.113 313.673 li
247.938 318.913 li
248.252 312.435 li
251.572 318.01 li
252.457 311.584 li
255.291 317.421 li
256.699 311.087 li
259.066 317.129 li
260.959 310.923 li
262.859 317.126 li
265.215 311.08 li
266.633 317.411 li
269.459 311.57 li
270.355 317.997 li
273.668 312.417 li
273.992 318.894 li
277.809 313.649 li
277.484 320.128 li
281.848 315.325 li
280.758 321.718 li
285.713 317.532 li
283.688 323.689 li
289.281 320.407 li
286.082 326.037 li
292.279 324.151 li
287.67 328.682 li
294.133 328.864 li
288.219 331.464 li
294.135 334.059 li
287.672 334.25 li
292.287 338.776 li
286.088 336.899 li
289.293 342.523 li
283.699 339.25 li
285.728 345.405 li
280.77 341.224 li
281.869 347.616 li
277.5 342.819 li
277.834 349.296 li
274.01 344.057 li
273.693 350.536 li
270.377 344.96 li
269.492 351.386 li
266.656 345.55 li
265.246 351.884 li
262.881 345.842 li
260.988 352.048 li
cp
f
391.246 244.593 mo
387.909 238.56 398.637 235.53 404.925 240.061 cv
414.68 233.106 426.011 241.692 421.045 248.218 cv
430.578 244.62 436.8 259.649 425.882 261.954 cv
429.759 276.601 416.842 274.915 412.601 271.669 cv
418.944 279.186 406.602 284.052 400.532 279.686 cv
394.74 285.304 378.919 283.167 383.503 274.706 cv
375.084 276.601 369.87 259.649 382.211 257.454 cv
375.982 251.46 378.587 243.802 391.246 244.593 cv
cp
f
211.773 200.645 mo
211.773 201.148 208.656 201.142 208.469 201.658 cv
208.292 202.14 210.775 204.036 210.469 204.473 cv
210.167 204.906 207.538 203.223 207.139 203.556 cv
206.727 203.903 207.797 206.832 207.317 207.013 cv
204.145 208.153 200.104 206.018 196.821 206.591 cv
193.515 207.167 190.436 210.538 187.09 210.538 cv
183.746 210.538 180.666 207.167 177.36 206.591 cv
174.076 206.018 170.035 208.153 166.864 207.013 cv
166.384 206.832 167.454 203.903 167.042 203.556 cv
166.643 203.223 164.014 204.906 163.712 204.473 cv
163.405 204.036 165.889 202.14 165.712 201.658 cv
165.525 201.142 162.408 201.148 162.408 200.645 cv
162.408 198.883 165.514 197.12 165.514 195.357 cv
165.514 193.595 162.408 191.832 162.408 190.069 cv
162.408 188.307 165.514 186.544 165.514 184.782 cv
165.514 183.019 162.408 181.257 162.408 179.494 cv
162.408 178.992 165.525 178.997 165.712 178.481 cv
165.888 177.999 163.405 176.104 163.711 175.665 cv
164.014 175.233 166.643 176.917 167.041 176.583 cv
167.454 176.236 166.384 173.307 166.864 173.126 cv
170.035 171.986 174.076 174.121 177.36 173.549 cv
180.666 172.972 183.746 169.601 187.09 169.601 cv
190.436 169.601 193.515 172.972 196.821 173.549 cv
200.104 174.121 204.145 171.986 207.317 173.126 cv
207.797 173.307 206.727 176.236 207.139 176.582 cv
207.538 176.917 210.167 175.233 210.469 175.665 cv
210.775 176.103 208.292 177.999 208.469 178.481 cv
208.656 178.997 211.773 178.992 211.773 179.494 cv
211.773 181.257 208.667 183.019 208.667 184.782 cv
208.667 186.544 211.773 188.307 211.773 190.069 cv
211.773 191.832 208.667 193.595 208.667 195.357 cv
208.667 197.12 211.773 198.883 211.773 200.645 cv
cp
f
350.131 260.253 mo
349.401 259.567 li
350.086 258.839 li
352.406 256.369 352.284 252.485 349.814 250.165 cv
339.813 240.773 li
337.342 238.453 333.459 238.575 331.139 241.046 cv
330.455 241.774 li
329.726 241.089 li
327.256 238.77 323.372 238.892 321.052 241.362 cv
311.659 251.364 li
309.34 253.834 309.463 257.717 311.932 260.037 cv
312.661 260.722 li
311.977 261.45 li
309.656 263.921 309.778 267.804 312.248 270.124 cv
322.25 279.517 li
324.721 281.837 328.603 281.715 330.924 279.244 cv
331.608 278.515 li
332.338 279.2 li
334.808 281.52 338.691 281.397 341.011 278.928 cv
350.402 268.927 li
352.723 266.456 352.602 262.573 350.131 260.253 cv
cp
f
127.803 35.248 mo
127.338 35.248 126.878 35.2725 126.423 35.3174 cv
122.646 31.1426 117.196 28.5225 111.138 28.5225 cv
105.003 28.5225 99.4941 31.2129 95.7119 35.4805 cv
94.8955 35.3311 94.0547 35.248 93.1943 35.248 cv
85.4873 35.248 79.2383 41.5254 79.2383 49.2666 cv
79.2383 57.0107 85.4873 63.2871 93.1943 63.2871 cv
94.0547 63.2871 94.8955 63.2041 95.7119 63.0547 cv
99.4941 67.3223 105.003 70.0127 111.138 70.0127 cv
117.196 70.0127 122.646 67.3916 126.423 63.2178 cv
126.878 63.2627 127.338 63.2871 127.803 63.2871 cv
135.511 63.2871 141.76 57.0107 141.76 49.2666 cv
141.76 41.5254 135.511 35.248 127.803 35.248 cv
cp
f
204.333 116.182 mo
204.265 115.952 204.19 115.723 204.113 115.495 cv
206.77 113.075 212.611 111.557 212.104 117.288 cv
218.993 110.979 203.712 101.668 199.578 108.386 cv
199.422 108.235 199.264 108.086 199.103 107.941 cv
200.059 104.48 204.511 99.9116 206.996 105.252 cv
209.824 96.2896 191.697 95.9165 191.695 103.953 cv
191.5 103.903 191.304 103.858 191.107 103.814 cv
190.114 100.373 191.656 93.9482 196.553 97.3823 cv
194.519 88.1968 178.602 96.9663 182.666 103.931 cv
182.471 103.98 182.279 104.037 182.088 104.094 cv
179.5 101.619 177.607 95.2622 183.576 95.7886 cv
177.247 88.8799 167.9 104.274 174.737 108.353 cv
174.582 108.501 174.43 108.65 174.28 108.804 cv
170.813 107.878 166.172 103.396 171.539 100.898 cv
162.688 98.1045 162.214 115.749 169.943 116.191 cv
169.876 116.418 169.811 116.645 169.752 116.876 cv
166.248 117.673 160.349 116.077 163.67 111.34 cv
154.713 113.323 162.829 128.512 169.695 125.497 cv
169.757 125.755 169.825 126.01 169.897 126.264 cv
167.169 128.593 161.581 129.928 162.076 124.319 cv
155.384 130.448 169.618 139.41 174.224 133.754 cv
174.425 133.963 174.631 134.167 174.841 134.365 cv
173.539 137.689 169.506 141.342 167.185 136.355 cv
164.474 144.945 181.019 145.645 182.397 138.611 cv
182.691 138.691 182.988 138.765 183.288 138.831 cv
183.748 142.355 182.064 147.335 177.628 144.225 cv
179.573 153.009 194.219 145.371 191.938 138.596 cv
192.235 138.513 192.528 138.424 192.819 138.326 cv
194.974 141.15 195.997 146.293 190.607 145.817 cv
196.716 152.489 205.643 138.363 200.095 133.712 cv
200.297 133.502 200.494 133.286 200.686 133.064 cv
204 134.382 207.612 138.396 202.643 140.709 cv
211.354 143.458 211.951 126.406 204.595 125.449 cv
204.656 125.188 204.714 124.926 204.764 124.662 cv
208.292 124.035 213.729 125.679 210.512 130.267 cv
219.534 128.269 211.231 112.873 204.333 116.182 cv
cp
f
250.257 412.779 mo
245.227 413.787 235.662 413.295 231.638 408.759 cv
235.944 411.66 244.463 408.856 248.487 406.84 cv
242.618 404.992 234.626 401.572 232.644 393.298 cv
235.494 397.667 242.872 401.699 247.902 399.684 cv
241.529 393.634 238.513 388.258 239.351 380.696 cv
240.357 386.745 247.23 392.795 252.261 394.811 cv
250.242 384.671 251.16 378.716 256.667 373.021 cv
251.984 380.819 255.781 388.258 258.799 392.29 cv
261.649 384.897 265.674 380.191 273.482 376.182 cv
267.543 381.214 264.418 386.917 265.592 392.462 cv
272.298 387.253 278.766 381.889 288.142 384.393 cv
282.713 382.942 273.219 391.45 271.877 396.323 cv
277.684 394.79 286.386 395.414 290.309 400.394 cv
285.797 398.656 277.913 399.348 273.89 402.373 cv
280.633 403.638 283.582 406.576 288.979 414.603 cv
284.317 408.832 274.145 406.576 270.704 408.254 cv
273.821 411.347 282.439 417.125 281.223 427.585 cv
279.685 418.601 270.971 415.309 267.853 413.463 cv
269.028 419.681 270.016 427.322 264.707 434.672 cv
267.848 428.37 265.307 420.936 261.985 415.983 cv
260.309 423.134 257.003 429.092 249.961 432.116 cv
253.984 428.083 254.775 422.536 255.781 416.487 cv
248.74 420.52 242.704 424.217 234.153 422.368 cv
241.195 422.368 246.232 417.82 250.257 412.779 cv
cp
f
62.8115 261.635 mo
69.7524 261.116 75.0098 260.564 79.2383 260.145 cv
72.5029 259.615 65.457 260.063 62.0752 259.606 cv
65.6421 257.68 75.1587 254.48 78.6255 253.564 cv
73.1558 255.008 64.6099 256.658 61.0869 256.803 cv
67.0156 254.395 68.3887 253.326 75.6782 250.003 cv
70.1846 251.455 64.7217 253.31 60.564 254.227 cv
62.4507 252.848 69.8696 247.979 72.8687 246.206 cv
70.2461 247.756 64.2056 250.648 60.3945 252.3 cv
62.1299 249.677 65.3936 246.313 70.3672 241.962 cv
70.4058 242.013 70.5186 242.166 70.4443 242.063 cv
70.3657 241.961 70.3291 241.909 70.3672 241.962 cv
65.7515 245.295 61.269 248.399 58.4712 249.766 cv
60.5527 247.311 64.0771 242.483 68.3887 237.306 cv
62.6626 242.919 59.7676 245.98 56.5957 248.346 cv
57.731 244.556 61.5288 236.156 63.3179 233.18 cv
60.5273 237.824 56.3389 244.401 53.9199 246.957 cv
54.3696 243.457 55.5679 238.523 57.5566 231.852 cv
55.6372 236.895 53.6606 242.516 52.1064 245.375 cv
52.1973 241.578 54.1826 231.174 54.5552 229.236 cv
53.2651 235.939 50.7314 242.08 49.3794 245.244 cv
49.3354 241.777 49.2896 235.085 50.0459 229.236 cv
49.5259 233.256 47.561 243.614 46.9604 245.612 cv
46.4312 242.641 46.5913 235.481 46.3091 229.752 cv
45.9072 237.949 45.2505 243.177 44.3745 245.841 cv
43.4014 241.858 40.6274 234.726 39.3652 229.236 cv
40.3086 233.34 41.4873 242.474 41.5435 246.265 cv
39.2495 242.798 36.3462 237.524 33.001 231.677 cv
35.5464 236.997 38.5391 243.67 39.8618 247.196 cv
37.4395 243.819 31.0659 235.54 28.4478 231.873 cv
32.2451 238.133 34.6084 242.16 38.0044 248.89 cv
36.7832 247.641 30.7881 242.653 27.1426 237.306 cv
32.2974 244.867 33.771 247.133 36.0146 251.079 cv
31.7759 248.283 30.144 246.707 22.2769 240.984 cv
24.2993 242.662 31.7939 251.048 33.7881 252.614 cv
29.8608 250.665 18.939 245.692 16.7715 244.145 cv
20.564 246.85 27.2744 250.758 32.1733 254.158 cv
28.2466 253.365 21.2651 250.648 16.6831 249.314 cv
19.2612 250.065 29.1113 255.582 31.0586 256.411 cv
27.5767 255.701 17.0376 253.475 13.6899 252.852 cv
22.0391 256.509 25.6309 256.981 29.4229 258.379 cv
24.0562 258.699 14.627 258.551 14.627 258.551 cv
19.5674 259.124 25.4146 260.084 28.124 260.981 cv
25.2822 261.751 21.3647 262.651 16.1211 263.718 cv
20.2246 263.466 25.0728 263.541 28.6851 263.294 cv
24.8237 264.385 21.6587 264.94 16.687 266.194 cv
16.6675 266.12 16.6465 266.047 16.6821 266.197 cv
16.7231 266.345 16.7065 266.272 16.687 266.197 cv
23.3423 265.986 24.8584 265.728 29.7837 265.539 cv
26.5073 267.443 22.4946 270.333 18.585 271.492 cv
24.4946 269.74 25.9224 269.723 31.3423 268.107 cv
29.0962 270.18 27.0396 271.495 19.29 276.314 cv
19.2422 276.245 19.1929 276.18 19.2861 276.316 cv
19.3833 276.448 19.3374 276.382 19.2905 276.315 cv
24.5273 273.916 28.5391 272.356 31.5093 271.564 cv
28.8848 274.099 25.2437 277.019 22.0498 279.558 cv
26.8052 275.776 31.9312 272.738 34.2666 271.853 cv
32.3135 274.698 28.7241 278.48 23.7334 283.317 cv
28.2349 278.954 31.8491 275.7 34.6782 273.701 cv
33.4541 276.308 31.6187 279.576 29.1245 283.612 cv
29.0566 283.571 28.9878 283.533 29.1226 283.616 cv
29.2612 283.693 29.1943 283.651 29.125 283.613 cv
32.2627 279.48 35.6748 276.045 38.0127 274.296 cv
36.2344 278.456 36.1465 281.168 32.9458 286.674 cv
36.8467 279.964 37.7217 279.581 40.4814 275.662 cv
39.8525 279.025 38.7202 282.044 37.1201 288.962 cv
38.6548 284.88 41.8779 279.793 43.2246 276.724 cv
42.8467 280.34 42.0952 285.248 41.4619 289.315 cv
41.3779 289.308 41.292 289.301 41.4609 289.321 cv
41.6304 289.332 41.5464 289.323 41.4629 289.315 cv
43.0508 283.293 43.8667 279.399 45.2593 276.724 cv
45.8701 280.061 47.02 284.626 46.7041 291.053 cv
46.999 285.046 47.6719 280.13 48.2671 276.793 cv
49.1519 279.813 49.9365 283.307 51.3638 290.183 cv
50.8203 284.641 50.666 279.777 50.8325 276.863 cv
51.9966 279.614 53.9014 284.42 55.0576 289.637 cv
53.7632 283.797 53.0562 279.257 53.1377 276.006 cv
54.874 278.51 57.084 282.406 59.6978 288.315 cv
56.8066 281.782 55.6367 277.701 54.4595 274.136 cv
56.7598 276.067 58.1509 277.857 64.6416 284.299 cv
64.6416 284.298 li
62.6504 281.059 58.0488 275.325 56.2163 272.432 cv
58.3032 274.329 64.4185 278.769 66.6694 281.507 cv
61.334 275.017 58.6694 271.369 58.4517 270.773 cv
60.7197 271.61 62.6787 273.486 72.0571 278.484 cv
68.436 275.577 62.3687 270.841 60.3701 268.872 cv
63.0264 269.723 69.5762 271.836 73.6387 273.945 cv
73.5972 274.012 74.8477 274.686 73.6426 273.948 cv
73.7227 273.815 73.6807 273.88 73.6392 273.945 cv
68.7524 270.747 64.2627 268.502 62.0313 266.498 cv
65.062 267.17 70.1768 268.47 75.959 270.408 cv
69.9028 268.378 65.8296 266.202 62.9805 264.385 cv
67.4937 264.385 69.9917 264.76 77.2212 265.431 cv
69.9824 263.294 65.8237 262.656 62.8115 261.635 cv
cp
f
356.245 340.076 mo
354.955 347.675 348.152 351.775 343.272 350.402 cv
335.112 348.522 326.952 348.522 318.792 350.402 cv
313.912 351.775 307.109 347.675 305.818 340.076 cv
304.932 334.349 304.932 328.622 305.818 322.896 cv
307.109 315.296 313.912 311.195 318.792 312.568 cv
326.952 314.448 335.112 314.448 343.272 312.568 cv
348.152 311.195 354.955 315.296 356.245 322.896 cv
357.133 328.622 357.133 334.349 356.245 340.076 cv
cp
f
260.984 134.845 mo
241.219 141.447 225.185 132.223 236.607 120.822 cv
225.168 109.437 241.188 100.19 260.964 106.762 cv
280.727 100.16 296.761 109.384 285.339 120.785 cv
296.777 132.17 280.759 141.417 260.984 134.845 cv
cp
f
67.3916 197.199 mo
74.4531 209.012 66.4951 213.809 56.623 205.77 cv
51.2373 210.003 41.6904 210.003 36.3047 205.77 cv
26.4326 213.809 18.4746 209.012 25.5361 197.199 cv
15.9258 193.419 15.9258 186.719 25.5361 182.939 cv
18.4746 171.128 26.4326 166.33 36.3047 174.369 cv
41.6904 170.136 51.2373 170.136 56.623 174.369 cv
66.4951 166.33 74.4531 171.128 67.3916 182.939 cv
77.002 186.719 77.002 193.419 67.3916 197.199 cv
cp
f
66.8013 120.804 mo
76.0063 114.879 li
62.188 113.553 li
64.7227 103.797 li
52.0586 108.192 li
46.4644 100.708 li
40.8691 108.192 li
28.2061 103.797 li
30.7407 113.553 li
16.9214 114.879 li
26.1265 120.804 li
16.9214 126.727 li
30.7407 128.054 li
28.2061 137.81 li
40.8691 133.414 li
46.4644 140.899 li
52.0586 133.414 li
64.7227 137.81 li
62.188 128.054 li
76.0063 126.727 li
66.8013 120.804 li
cp
f
433.303 120.803 mo
419.176 121.947 li
433 125.068 li
418.854 124.2 li
432.092 129.265 li
418.217 126.374 li
430.592 133.284 li
417.271 128.44 li
428.535 137.042 li
416.042 130.35 li
425.967 140.469 li
414.547 132.074 li
422.941 143.495 li
412.823 133.568 li
419.516 146.063 li
410.908 134.802 li
415.757 148.119 li
408.847 135.745 li
411.733 149.621 li
406.674 136.381 li
407.54 150.529 li
404.42 136.703 li
403.275 150.83 li
402.132 136.703 li
399.007 150.528 li
399.877 136.381 li
394.818 149.62 li
397.703 135.743 li
390.797 148.12 li
395.642 134.801 li
387.034 146.061 li
393.727 133.567 li
383.609 143.494 li
392.004 132.073 li
380.584 140.467 li
390.511 130.352 li
378.016 137.041 li
389.278 128.438 li
375.959 133.283 li
388.334 126.374 li
374.459 129.263 li
387.696 124.2 li
373.551 125.069 li
387.377 121.95 li
373.248 120.803 li
387.376 119.659 li
373.551 116.537 li
387.696 117.406 li
374.459 112.342 li
388.334 115.232 li
375.959 108.322 li
389.28 113.166 li
378.018 104.562 li
390.511 111.254 li
380.585 101.136 li
392.006 109.531 li
383.611 98.1099 li
393.728 108.037 li
387.036 95.5435 li
395.64 106.806 li
390.797 93.4863 li
397.701 105.862 li
394.815 91.9863 li
399.879 105.225 li
399.009 91.0781 li
402.13 104.904 li
403.275 90.7764 li
404.42 104.903 li
407.542 91.0781 li
406.672 105.225 li
411.736 91.9868 li
408.846 105.861 li
415.755 93.4863 li
410.913 106.807 li
419.517 95.5444 li
412.823 108.038 li
422.943 98.1138 li
414.547 109.533 li
425.967 101.138 li
416.042 111.255 li
428.535 104.563 li
417.272 113.167 li
430.593 108.323 li
418.217 115.23 li
432.092 112.344 li
418.854 117.406 li
433 116.536 li
419.176 119.659 li
433.303 120.803 li
cp
f
429.927 403.846 mo
429.927 404.234 426.842 404.552 426.825 404.936 cv
426.807 405.325 429.85 405.92 429.815 406.304 cv
429.779 406.691 426.679 406.725 426.626 407.105 cv
426.571 407.49 429.549 408.365 429.477 408.743 cv
429.407 409.125 426.315 408.871 426.227 409.246 cv
426.139 409.624 429.021 410.77 428.916 411.141 cv
428.81 411.514 425.756 410.975 425.633 411.341 cv
425.509 411.708 428.272 413.117 428.134 413.478 cv
427.993 413.84 425.003 413.018 424.847 413.37 cv
424.689 413.725 427.31 415.386 427.138 415.73 cv
426.964 416.077 424.061 414.981 423.874 415.32 cv
423.685 415.657 426.141 417.552 425.936 417.881 cv
425.733 418.21 422.944 416.852 422.726 417.17 cv
422.506 417.488 424.776 419.603 424.543 419.91 cv
424.31 420.219 421.658 418.61 421.411 418.907 cv
421.164 419.205 423.23 421.517 422.971 421.803 cv
422.708 422.089 420.217 420.243 419.942 420.517 cv
419.669 420.79 421.516 423.283 421.229 423.543 cv
420.944 423.803 418.631 421.736 418.333 421.984 cv
418.036 422.231 419.645 424.883 419.338 425.117 cv
419.028 425.35 416.916 423.079 416.597 423.297 cv
416.278 423.517 417.636 426.305 417.308 426.51 cv
416.979 426.712 415.085 424.257 414.746 424.445 cv
414.409 424.633 415.504 427.535 415.158 427.709 cv
414.813 427.882 413.153 425.261 412.799 425.417 cv
412.445 425.573 413.268 428.564 412.905 428.705 cv
412.547 428.844 411.137 426.081 410.769 426.204 cv
410.403 426.326 410.942 429.381 410.569 429.487 cv
410.199 429.592 409.053 426.71 408.676 426.799 cv
408.3 426.887 408.554 429.978 408.172 430.049 cv
407.794 430.119 406.92 427.144 406.535 427.196 cv
406.154 427.249 406.12 430.352 405.734 430.386 cv
405.35 430.421 404.754 427.377 404.365 427.395 cv
403.98 427.412 403.664 430.499 403.274 430.499 cv
402.886 430.499 402.569 427.412 402.185 427.395 cv
401.796 427.377 401.2 430.422 400.816 430.386 cv
400.429 430.352 400.395 427.249 400.015 427.196 cv
399.631 427.144 398.756 430.119 398.378 430.049 cv
397.996 429.978 398.249 426.887 397.875 426.799 cv
397.497 426.71 396.351 429.592 395.979 429.487 cv
395.607 429.381 396.145 426.326 395.779 426.204 cv
395.412 426.081 394.003 428.844 393.644 428.704 cv
393.282 428.564 394.102 425.573 393.749 425.416 cv
393.395 425.261 391.736 427.881 391.391 427.707 cv
391.043 427.534 392.139 424.633 391.802 424.443 cv
391.463 424.256 389.569 426.711 389.241 426.508 cv
388.912 426.304 390.27 423.515 389.951 423.296 cv
389.632 423.077 387.519 425.348 387.211 425.114 cv
386.902 424.881 388.511 422.228 388.215 421.981 cv
387.917 421.734 385.603 423.802 385.318 423.542 cv
385.032 423.28 386.879 420.787 386.605 420.514 cv
386.331 420.24 383.838 422.086 383.577 421.8 cv
383.317 421.514 385.384 419.203 385.138 418.905 cv
384.89 418.607 382.238 420.216 382.004 419.907 cv
381.771 419.6 384.043 417.486 383.824 417.167 cv
383.604 416.849 380.816 418.207 380.611 417.878 cv
380.408 417.55 382.865 415.654 382.675 415.316 cv
382.487 414.979 379.585 416.074 379.412 415.728 cv
379.24 415.383 381.861 413.725 381.704 413.37 cv
381.548 413.018 378.557 413.838 378.417 413.477 cv
378.277 413.116 381.04 411.707 380.916 411.339 cv
380.795 410.974 377.74 411.514 377.634 411.141 cv
377.528 410.77 380.411 409.624 380.323 409.246 cv
380.234 408.871 377.143 409.125 377.072 408.743 cv
377.002 408.365 379.978 407.49 379.925 407.106 cv
379.872 406.725 376.77 406.69 376.735 406.304 cv
376.7 405.92 379.744 405.325 379.726 404.936 cv
379.709 404.553 376.623 404.234 376.623 403.846 cv
376.623 403.457 379.709 403.14 379.726 402.755 cv
379.744 402.367 376.7 401.771 376.735 401.387 cv
376.77 401.001 379.872 400.967 379.925 400.585 cv
379.978 400.201 377.002 399.327 377.072 398.949 cv
377.143 398.567 380.234 398.821 380.323 398.445 cv
380.412 398.068 377.528 396.921 377.634 396.551 cv
377.74 396.177 380.795 396.717 380.917 396.352 cv
381.041 395.983 378.277 394.575 378.417 394.214 cv
378.557 393.853 381.548 394.674 381.704 394.321 cv
381.861 393.967 379.241 392.307 379.413 391.961 cv
379.586 391.615 382.488 392.709 382.677 392.372 cv
382.865 392.034 380.41 390.14 380.613 389.811 cv
380.817 389.481 383.605 390.841 383.825 390.522 cv
384.044 390.204 381.774 388.09 382.007 387.782 cv
382.24 387.473 384.892 389.082 385.14 388.784 cv
385.386 388.486 383.319 386.175 383.58 385.889 cv
383.842 385.603 386.334 387.449 386.606 387.175 cv
386.881 386.902 385.034 384.409 385.32 384.148 cv
385.605 383.889 387.919 385.956 388.217 385.707 cv
388.514 385.461 386.905 382.809 387.213 382.574 cv
387.522 382.342 389.635 384.613 389.954 384.394 cv
390.272 384.176 388.913 381.387 389.243 381.183 cv
389.571 380.979 391.466 383.435 391.805 383.247 cv
392.141 383.059 391.046 380.156 391.392 379.983 cv
391.737 379.81 393.397 382.431 393.752 382.274 cv
394.104 382.118 393.283 379.128 393.644 378.986 cv
394.004 378.848 395.413 381.611 395.781 381.488 cv
396.146 381.365 395.607 378.31 395.979 378.205 cv
396.351 378.101 397.498 380.981 397.875 380.893 cv
398.249 380.806 397.995 377.714 398.378 377.644 cv
398.756 377.573 399.63 380.549 400.014 380.495 cv
400.395 380.443 400.43 377.341 400.816 377.306 cv
401.2 377.271 401.796 380.315 402.185 380.297 cv
402.568 380.28 402.886 377.193 403.274 377.193 cv
403.664 377.193 403.98 380.28 404.365 380.297 cv
404.754 380.315 405.351 377.271 405.734 377.306 cv
406.12 377.341 406.153 380.443 406.535 380.495 cv
406.92 380.549 407.793 377.573 408.172 377.644 cv
408.554 377.714 408.3 380.806 408.676 380.893 cv
409.053 380.981 410.2 378.101 410.569 378.205 cv
410.943 378.31 410.404 381.365 410.77 381.488 cv
411.138 381.611 412.548 378.849 412.907 378.987 cv
413.269 379.129 412.447 382.118 412.801 382.275 cv
413.153 382.432 414.813 379.81 415.159 379.983 cv
415.506 380.156 414.41 383.059 414.747 383.247 cv
415.086 383.435 416.981 380.98 417.31 381.185 cv
417.639 381.389 416.28 384.178 416.599 384.396 cv
416.919 384.615 419.031 382.345 419.339 382.577 cv
419.648 382.81 418.039 385.463 418.336 385.709 cv
418.633 385.957 420.947 383.891 421.232 384.15 cv
421.518 384.412 419.672 386.904 419.944 387.178 cv
420.218 387.451 422.712 385.605 422.973 385.891 cv
423.233 386.177 421.166 388.489 421.413 388.787 cv
421.661 389.085 424.311 387.476 424.545 387.783 cv
424.778 388.092 422.507 390.205 422.727 390.523 cv
422.945 390.843 425.734 389.485 425.938 389.814 cv
426.143 390.142 423.685 392.037 423.875 392.374 cv
424.063 392.713 426.966 391.617 427.139 391.964 cv
427.31 392.309 424.689 393.968 424.847 394.322 cv
425.003 394.675 427.994 393.853 428.134 394.216 cv
428.273 394.575 425.51 395.984 425.634 396.353 cv
425.756 396.719 428.81 396.178 428.916 396.552 cv
429.021 396.922 426.139 398.068 426.227 398.445 cv
426.315 398.821 429.407 398.565 429.477 398.947 cv
429.549 399.326 426.571 400.201 426.626 400.586 cv
426.679 400.967 429.779 401.001 429.815 401.387 cv
429.85 401.772 426.807 402.366 426.825 402.755 cv
426.842 403.14 429.927 403.457 429.927 403.846 cv
cp
f
356.813 49.2681 mo
356.813 52.5044 352.496 54.8584 351.328 57.6733 cv
350.119 60.5908 351.461 65.2983 349.262 67.4966 cv
347.063 69.6958 342.355 68.3535 339.438 69.5635 cv
336.624 70.7305 334.269 75.0479 331.033 75.0479 cv
327.796 75.0479 325.441 70.7305 322.627 69.5635 cv
319.71 68.3535 315.002 69.6958 312.803 67.4966 cv
310.604 65.2979 311.948 60.5908 310.737 57.6733 cv
309.571 54.8584 305.252 52.5034 305.252 49.2681 cv
305.252 46.0313 309.571 43.6768 310.737 40.8618 cv
311.948 37.9443 310.605 33.2373 312.805 31.0381 cv
315.002 28.8403 319.71 30.1826 322.627 28.9727 cv
325.441 27.8057 327.796 23.4878 331.033 23.4878 cv
334.269 23.4878 336.624 27.8057 339.438 28.9727 cv
342.355 30.1826 347.063 28.8403 349.262 31.0381 cv
351.461 33.2373 350.119 37.9443 351.328 40.8618 cv
352.496 43.6768 356.813 46.0313 356.813 49.2681 cv
cp
f
212.028 260.145 mo
212.028 264.351 207.457 267.37 205.492 270.766 cv
203.465 274.271 203.066 279.716 199.563 281.743 cv
196.165 283.709 191.297 281.388 187.09 281.388 cv
182.884 281.388 178.015 283.709 174.619 281.743 cv
171.114 279.716 170.716 274.271 168.689 270.766 cv
166.724 267.37 162.153 264.351 162.153 260.145 cv
162.153 255.938 166.724 252.919 168.689 249.523 cv
170.716 246.019 171.114 240.573 174.619 238.546 cv
178.015 236.579 182.884 238.901 187.09 238.901 cv
191.297 238.901 196.165 236.579 199.562 238.546 cv
203.066 240.573 203.465 246.019 205.492 249.523 cv
207.457 252.919 212.028 255.938 212.028 260.145 cv
cp
f
216.996 331.484 mo
205.851 342.311 li
202.049 357.387 li
187.09 353.141 li
172.132 357.387 li
168.33 342.311 li
157.185 331.484 li
168.33 320.658 li
172.132 305.583 li
187.09 309.829 li
202.048 305.583 li
205.851 320.658 li
216.996 331.484 li
cp
f
208.314 49.2676 mo
208.314 46.6328 206.178 44.4951 203.542 44.4951 cv
199.826 44.4951 li
203.045 42.6377 li
205.327 41.3193 206.109 38.4023 204.791 36.1201 cv
203.475 33.8389 200.556 33.0557 198.272 34.373 cv
195.056 36.2305 li
196.912 33.0137 li
198.23 30.7305 197.449 27.8125 195.166 26.4951 cv
192.885 25.1777 189.966 25.959 188.647 28.2412 cv
186.791 31.457 li
186.791 27.7441 li
186.791 25.1104 184.654 22.9727 182.02 22.9727 cv
179.383 22.9727 177.247 25.1104 177.247 27.7441 cv
177.247 31.458 li
175.39 28.2412 li
174.072 25.96 171.154 25.1768 168.871 26.4951 cv
166.589 27.8125 165.808 30.7314 167.125 33.0137 cv
168.982 36.2305 li
165.765 34.373 li
163.483 33.0557 160.564 33.8369 159.247 36.1201 cv
157.928 38.4014 158.711 41.3193 160.994 42.6377 cv
164.211 44.4951 li
160.496 44.4951 li
157.859 44.4951 155.725 46.6328 155.725 49.2676 cv
155.725 51.9043 157.859 54.04 160.496 54.04 cv
164.209 54.04 li
160.994 55.8955 li
158.711 57.2148 157.93 60.1338 159.247 62.415 cv
160.566 64.6973 163.482 65.4795 165.766 64.1611 cv
168.982 62.3037 li
167.125 65.5205 li
165.807 67.8037 166.59 70.7217 168.871 72.0391 cv
171.154 73.3564 174.072 72.5742 175.39 70.293 cv
177.247 67.0762 li
177.247 70.791 li
177.247 73.4287 179.383 75.5625 182.02 75.5625 cv
184.654 75.5625 186.791 73.4287 186.791 70.791 cv
186.791 67.0762 li
188.648 70.293 li
189.967 72.5762 192.884 73.3564 195.166 72.0391 cv
197.449 70.7207 198.232 67.8047 196.914 65.5205 cv
195.057 62.3037 li
198.272 64.1611 li
200.557 65.4795 203.473 64.6963 204.791 62.415 cv
206.109 60.1318 205.328 57.2148 203.045 55.8955 cv
199.828 54.04 li
203.542 54.04 li
206.178 54.04 208.314 51.9043 208.314 49.2676 cv
cp
f
434.383 49.2676 mo
434.383 47.3022 431.855 45.7075 428.736 45.7075 cv
424.342 45.7075 li
428.149 44.3213 li
430.848 43.3389 431.773 41.1616 430.215 39.4585 cv
428.657 37.7563 425.203 37.1724 422.504 38.1553 cv
418.697 39.541 li
420.895 37.1411 li
422.454 35.438 421.531 33.2612 418.828 32.2783 cv
416.129 31.2954 412.676 31.8779 411.116 33.5811 cv
408.921 35.98 li
408.921 33.21 li
408.921 31.2446 406.394 29.6499 403.275 29.6499 cv
400.156 29.6499 397.629 31.2446 397.629 33.21 cv
397.629 35.98 li
395.434 33.5811 li
393.874 31.8789 390.422 31.2944 387.722 32.2783 cv
385.02 33.2612 384.096 35.439 385.655 37.1411 cv
387.851 39.5405 li
384.046 38.1553 li
381.347 37.1724 377.895 37.7559 376.335 39.4585 cv
374.776 41.1606 375.701 43.3389 378.4 44.3213 cv
382.208 45.7075 li
377.813 45.7075 li
374.694 45.7075 372.167 47.3022 372.167 49.2676 cv
372.167 51.2349 374.694 52.8276 377.813 52.8276 cv
382.205 52.8276 li
378.4 54.2129 li
375.701 55.1963 374.777 57.374 376.335 59.0762 cv
377.895 60.7793 381.347 61.3623 384.046 60.3789 cv
387.851 58.9937 li
385.655 61.3931 li
384.096 63.0962 385.021 65.2739 387.722 66.2568 cv
390.423 67.2393 393.874 66.6563 395.434 64.9531 cv
397.629 62.5537 li
397.629 65.3252 li
397.629 67.2925 400.156 68.8853 403.275 68.8853 cv
406.394 68.8853 408.921 67.2925 408.921 65.3252 cv
408.921 62.5537 li
411.116 64.9531 li
412.678 66.6572 416.128 67.2393 418.828 66.2568 cv
421.529 65.2729 422.454 63.0972 420.895 61.3931 cv
418.699 58.9937 li
422.504 60.3789 li
425.204 61.3623 428.655 60.7783 430.215 59.0762 cv
431.773 57.3721 430.851 55.1963 428.149 54.2129 cv
424.345 52.8276 li
428.736 52.8276 li
431.855 52.8276 434.383 51.2349 434.383 49.2676 cv
cp
f
360.556 190.178 mo
355.429 189.244 352.89 184.591 349.044 182.189 cv
349.66 177.799 348.601 172.958 351.986 169.27 cv
347.847 172.133 342.959 170.83 338.649 171.658 cv
336.185 168.031 331.824 165.492 330.923 160.546 cv
330.71 165.544 326.541 168.218 323.872 171.755 cv
319.454 170.733 314.365 172.235 310.078 169.27 cv
313.464 172.958 312.404 177.799 313.02 182.189 cv
309.174 184.59 306.635 189.244 301.508 190.179 cv
306.508 190.393 309.181 194.561 312.719 197.23 cv
311.695 201.648 313.197 206.737 310.232 211.024 cv
314.047 207.522 319.094 208.776 323.601 208.011 cv
326.247 211.738 330.702 214.42 330.923 219.593 cv
331.857 214.467 336.512 211.928 338.913 208.081 cv
343.304 208.698 348.143 207.638 351.831 211.023 cv
348.866 206.737 350.368 201.648 349.347 197.23 cv
352.884 194.561 355.557 190.393 360.556 190.178 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 18.1.1
%%For: (??????? ??????) ()
%%Title: (1508.m00.i121.n016.P.c25.273308033 Sticky stars vector badge set.eps)
%%CreationDate: 8/13/2015 1:07 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj28*dQdZB51aqk6_$Fbp?K0hPmj=!'Ejr8@RqDnKHt/KDtf1iB7K2J[CXh<5alc&-c;LuXW(;U9sn`==tB@8jdWqQ[FR=Z
%2ud(+(mu,n0f&N>r;0jqmQIc@Kq3!&MTnc^4D]+`gW`@CknKTZB"PC<ak+_$1\s5Cm2U#olJYdMI9u>RgoS>Oefb.0m?CD`eI;JZ
%gUA,eHES7T;ZEu4I86DYp_3+XJ(Y@E?!7T[TJ69"Z[?e&/.[4G54=1Q[8+2:madhd08fhTD7_RfIb6-n#;d9W6[om8_b;dI0)+X:
%=\Yb(76br31DjRMZdV66LO6QgOlAT[rZf0,5Al;VX=4"u#J9mIIPru_`g1mnGDhj+'EAsEVN4I-6!]oZ/IT3^i:%jODq3%eO:TPl
%SZJ#XOoH_WM1Fi4(i[GMZ`]d#EG['B\/E?J?WDX61i32r_k4@+cdg82YZqXlqODWomXFPA3_rHm\p:J\&)2"A[4\/tjL.;`i`3<'
%f&\#spT8`Z8"2mVs/R:Qb3bCs9,-'\pM^VC);g66Hegb:Q%+MT:,H?t\C1d(#L.J*:a0(-A(l<"QKMc[j[9@8=L:^bc1jEoQl#hZ
%UObQJc7VuQ::k[ICTOZe)JR/F*DN6Rg9k[f5Wpp`b<NXpXIo8,7"=l-C#e#efSJ+]beq;ur^_d+IC5-H2]L:6o,K+XVRVs?,&\%k
%f:+/ae,D#u)%Fu/l-41biThh5W&69u^]3t154];/lTP+6=hE@&D)[KEs8LV:Y1buF1[i1Q\(RW7X_)a:^=+`nR0@3?bX&jGTeYd*
%(a`Ii[2)7@8Gd4Y)>TNnnupI@e+>"/,sfs$5[$)c5JqfRPo*W]dYp_KVGV5Dpk*h,;XGi[;C4O!LBM#;rK(bfU6ZRgKh#R=$fbRr
%OSC6K<2EdYdLb27DKl+s[a/o#eZdgF_.a,057>)gdu2-/f)K@?h/`7S<(#<:G%+^tYC/M8pX5@>`'V"@YFW&DXj^H"PAg1VVjW0L
%ZQ>/kjR[VnjCeB&HD]Ie2f(Er)R?!YZYG#K'9\$44qg%_ghYP9o\hXO&g:kn=sFW%"Y3meZi=[+BYIG-8k"^9^Wqn/oigN@*^/2^
%9:Sq]eAM5lSSjfe2XORjEPl`Ppectth0^FurU*g-Cr`pffa4)F?EG1?H*_eQJn^Y+5:s?2`_ZfKh]L9,,e]Mn>:V3K24?;]_u4f*
%83h<+Tfe3^cE,H4+'t4=PPN$Z(Maaf'BSqk&Ke,d(B-@u2sA-o69r/+eE_i7aHd,df5?p._Gj9GokHR)0SGj>Zq]g2rXf*OIpq+(
%iIWhDH]+:^q_W!HA.[s;\_be3J(CXUdjr3Pj`?!I"_bF-M;HHj=?AP1VV"TG33MYEg!!ePp@6aFDrFcT/c6OE(38/b\U*SKI&KMQ
%V,g<q(BBG11JKd)'7TW<4WUlq@Q,dUjp%KFdqr[EA7E%"4sJU`;$fa&7s^._90E"%2Df_1mBG'?ViclLi4-5EB^U([A0$Zd;MX3B
%BLkM&"41PAQs%<E]s4>Q-erHl5C,_oC#nF\pi1/r*5/[JmsM%]/cSLe@S,LB_WIkPX6UNb>"FAQUP)*Gh:JEOJji)0ERb@*-oaJO
%Mo>=Y]lk]L-I-b&*MqK:q"Adj!Y_&:[_d3USB)CKl%>"a?e>VLYZI-B?%16PfN9$)J4ITJ33tMejX+k$F'!7b[P0;9S3;)Xrbo;e
%a6bY8L\99D>%d9I%Gf7`RJX,3>`,3%PkoDLAE_g8RpZOWpZ;D;qjI>%F'gPrqd[s80:-E0;rc''Qo![FV;&rLqfDT&B3=%U/Q\Ek
%rmM1bC%QU;A$V:["8Xd,M:q,oMrDu#f?:&^$Bj?-g=K38GEo'%03u)-=olsl]hYJ+DWJ"Xh.59bl&K?7\YaY"g^1UESAI+;#uZS2
%C)W@A*M^nSZ\L@U\,'n,]Y;9?2O.NRL\6I<^'\6&q"+,m^L][Vr2QZO%;NDpegqIf_GH'&e%:LOVGVf=W9NO<g;i;I\6g\_UU1'k
%Z2&Plp-jbiX-_RpAu!g,2q"5IjXt&tT94STRt%i7NUTCVm!"jqLL\:XN"d\/FDk8!WO=P?r\-A*WOD>@MJ`8SFrOr#=_i+Pl%27F
%^Mb"eRT3#7DO=%kkD!u-M9cU+2@q4leG5XqJ]U*EBo?ob/B]b^&g2m334m>#9-+:f-D%TA5_>gdSBoW"ibY3YrL`Z%<C*.+1U5!0
%LN:#X4Zs=fBb"[RoL^$VZ-jVP2826'CL+[05?EmF(%N_H\)&CiIM3kac3&J0[SK4tE[n2^oSb\tkODbX0sC0DVc9+R=8?+/S$?&j
%3%9#,l!_h97l'$hc.r#$U"QO1gL9l$MF?:uhSq,%gR,*(VJ6R$im!iTQJu;L-9J96.;l#lbLKcL%0K(M'7;S8F<0F\ZT"B@egXo@
%9VJ7/cjcBNY6bqMZZLh;[Y._NRnIh]2(9n-l,)a77FZQs(k(Kf/g-_;':BU?TAh?Q)8$fYMR"R8@&;94diu$EChD\e2)G4s6&HnU
%dK^+WP[)NV.%"8M0_m"WZ_;?@WgT5DKp,t!S[@!!`d=m5c*9sTlJ,$p5qAIk)i_)9+4g8R4OPM)/p/&`rc0HNCH(/.jXt&o2T8jt
%Kl9Dsf>"sJ\#*'bS<ms"'WJP*n9!(aLIkQ0rU5ij>l%;,r&B#/r*pWa/cm$Iae]:%9T?JTZ^GM6jiI1J>pgmE>J?ppMb+]kBeGTE
%ja/'u>g_fpq@oEeok/H.;\gSufBW$N'g)*Y*GE"_BDL.Zb&`Y2]B+3.&f&K-D95ASSSFTpC'89f-;o_<*/,c>jLU'bf2bejmDPm]
%a^=WL7W.Vqr4"XfY;O1;ME:g'EkR(n+AK,I53TL7eS$j=8@ii<dQ?o';^jJ@>RB>.D6"\_:Rbg+eS5P#MOA'`1$I6m?O@=QRE!!Y
%::(a\ghr^]dAm[6<mRMqW1BhqMWNa'Jm!>cD$GBWb"Pg0pbPa'P3,00-%%GN7%'kGCb!SrG_%_FPpg?)1\'_:)6ZGriU8p'o8;>9
%(1hM4_rTFDb_F9.V-9)t-M!DNU80f8M-$;?>*O:ab(Q^`RAr\I,oe7;nVek]RE\p"at2);UtNu!"EUHR(+%L69Y*c^eQS3[/CgJj
%g!$gBrBH^HRDt\a<+gIYWA2])SF4Gh;H7td:La1W&"0#ApoUS6k6bhdrPI@`@?FoP3W+XW7+8*LB'h>>R=+`V9n<%(GU[:,K(W`Z
%bfo2&:#qa)QYUZQ2?e+Q"eEs#g0Cdt+)\NdAT"ZqSlcA?YVRWVk186kWnfq?c&K-A<1<rg2Rh6!;D"/594ihea,o2M1mFe$_1.r;
%SZ2hNS;hF37c'Yp;P7FC7WUI+TGbek3%8V"ACGn)b23i9j0HTo3:,5q$L>=snuor\pbq&42DkGOTbL%4LZco4YOg'^D]/H4/Lo#O
%-hGqorg-ig26,VTX`=$c]+.Y@.kGn&WQljl40G]F;H_KK.SZgpGA0NbDlR-?;&QcR)B%Y`^IEtWY0kSfs#'Wq1IFV-o@J3cZe'E@
%kCMFL`Ks.PNFqKl(]O`#mWe#<;gm'ge.hGNgWoi<1B-N/+\hmjplkn>l/M'P"\rhWXO94L2*9kum.@HD;u`[V)lFf,7(\p\.?Gb+
%GBR!)/9r'4)AdhXd$gAI3L1jUH'W%UBB+B;j@26rnM3*6Rp;5e*&nRXI![9NCYdJ2Ya\,::R-B#__5)VQjk$q2&Z>_RpM2H#phTk
%M23+BmJNj=r2/@6s81RA^U*Drj?3I3!_N"]ml^V3ci;;^^Ze_Ko]L^:nln]<+@-4a1tGPC-hEks4QefPq-H+JH-UW*o:=7qb]CMu
%UZ;+af'CRF7it:8G&l:_J<^J5W(_1j(HY;M]hQ([X4E;lHYL2@ASM?6lBq9ob.#e(TI4tcqBu`r#.`KJ1e2\fa4P4s'KW\S4sjJe
%m@au@:HWjGq@0]TKP\LMAFo9!SO^d#L[h,R7c-=%2N_E'1$mLeg0rW9,9o0Q,=8N'1tR3-Re<nsede`rc$$X;AZBhn5F]^>k4,cn
%Q*Hr*p0@U/G2DOkp!%me-PA_*Mp0rjgBm3<>KZ_D!d;drRUV6sV\8XT=DLimib4R`@\$,s-d=B,(JT4gW7))(Up\pkXh]BZma$gr
%+OYX3BQU%/#TR.<1=7JI=1e90MsRqmD6Vo/*dF(X?@E:\c3#^92_koVbQBNi^rm:p7$pCE000HXnX"OZAKH)a#@?PDQco:%]n)O?
%Bs?9io9ksGd_9mLVE0;cCY,n2'Ps34d*^(N2Y#O3@H3SGe,@oeRZ#m`rn'X8ih=J\A8,@-R.Q.\B'l'AjtBG&Y\m$R30X?i7(q1-
%/_@.a\'L?""Okqt/&rTt`Y5NuBAk/6o_^o)NH<qNH[01+FQ<9&VV-9Hkm$<3Isl&1qU2mp1q.nCIp0!5s."R1c2X&!MIu0TIYtVB
%k-sn/`[$rJlg-E*^"YY5mY"l969D9G'EqE6`1,c04KDOtL4MCs^F":<.D?C\J]>q*4%sGi(O^i6KZduV)47dpq2HhnkrG!=LGfS_
%R^.p"UFGi]=uB;/RYDcJ>#SIjc('OQb+N4ZEG]>W3@VD#`mu!%WKD'3BoJ$Yj4csdN\Q$"Gok"n6BB?]a"c^rN(H*sM<C=qNaqi?
%&B@>JLNskL_DU^CN\RMBHlg=qa"aG:NWBZm>>A1O2##=._*:#!QRgm4rH5H4k3din)i9r,pp"Y7ndegnN+WeQ+s^)s,H'5=`/BgK
%F2(rF<j%>;%YOf^G>P?<]!O[%4g*$Ifb?+2*0iVE<]g6,$QG?fm_B#$EU>@&X%JB.q$tN_T;bR:#s>%nJ,[gA."OD8LPBF%SY6pM
%S0s:MSA3<)A7sqPRqM^oc%#F\c'U&G'OU+SD5QhqRM0RG*OhO$Bp:3%V)1;`:XJ,KcNa?N^s><MIFP<]oUY-;i9\+*P01h7FKbRc
%5'f!0;!lL[H-HGfBq3=K.elWDRAhY19!aol0DA)FKul"AlDs-dX)@]-;Zq'2:e6/5mO5DXg<p;[cj[nQB0;,ib\eC^7?u0e%V*h5
%\c3>W>WS!+pZCVpgt\BgHZKkY$I-8ps/e5H_T80mF0jfLc!YhLgn1&_IkJ\R$WH?9V:aJVSX[64F*DNicHY1U)gXcp/@fi$2D[5Y
%gkqO$LG%C0-JtYHheZ=hg>t/SFmdT#Jj220hhmQ5Ln6iP0RbB,j[05NnhkCXG9nSgq.KP0M>@%9QemuE,E^62nG6c=a;@],\k_Cf
%Hl;YC;8$3p>K]Q9ZW40X]"_9EKaTuu?hH6QC(3*S\kDjihbtcG;XS1$fOtYG2jIY?T=kmonNkI-oJPl&c-1V)l:bDr*Ic;>0O(i"
%]"]oecdPkFNU-GAZWF:C*6EiDfO;XFkt.4_WP:*1C1KWq0*g78PZ(_X"4.^o.t*Y9Au!g,?hoD-!tO/+*oks[MF+18YC0ZYKP:s6
%&:EKJl^ua"PGSeRQ/[VCJ(MtmWH*PEjL>]N:%=TF=Jt%SL:\,'j4Y+repmIKW,\8%`>T,l;S%PJo']fh$\=I!>isVmgm\+WIaCg'
%i-B&g\llEN;V6*=J_n2@]A-t6qb*V.UXa8]eS7"Z)f;h:ASr4,NM><D'[:KhIs`F:RYRfp.%7OFjVq>5'5n9'>Qk)9)gCm]pM[G"
%cE;aj*X7/77:,4g<Kf)X;A^TjBf9rh`]_OLNG+b:\Z0OXi(WM-m@i=<F\g?$<+!j'<OsL$iEZ&!eA1$Fj0[@K]B.b30'$7t:,$NZ
%\oPHWBftnm16'+*kmB1/^X%&_>W;Xg?CC-!WRm-Y(dXaCg#/YE4hjKI:!\+_el>Bi7Ej[/5-spaiZk'gRE"%X9YX4WbKnC-_UkX_
%/g3F?%hkM#Bt+lG)GGhn^PUI0GS.)6LAj!qVmp=1:AMpe>SR:"CWFc"GNYEpVlBCVlHT%'lZd9P`PcRq8$i'1a7$bT2bkE_qDU0Y
%?Yj4'gY&"V>F6qIn6!\&$CBa!Y@WZVqks4OM>r6+VBG>N"*8>=A_G9BfHHL[MECTM:K,S-U1=VVB&\)+V>2=hWO/Re#F4:,iO!UP
%e/QoDUk(dH+-+84<inO)prB2$E4:4Zk&dLF3b`2(KY_rOn'X\l#,'!f9t#A-b2-*TO]`m6XHtXsZVG,Yk%$Af1/kM4bjo6q%Ug.Y
%=+Ut:j[SDmbr7(F+O/g=ilAu-4`4l09t].>PCX7<](&tPo?bO^e)?J!>eN>qE;id^SX3IXSeB6(["96G$.?NB[PA=O)qF`,OLWP$
%e)BV)A!][D2hk@THTjQk23OU0qd6O2r0]41mFHXVmgai2#q[Q,D'"D!I(Rujc+GMbasUUZZdZ)*)Fo4CO\ZAHHG+JG$=/9*1n4/.
%oP^pR3oo<kMj^YQ&8blq3PT!<=0)oo\8$_U]%Y021WhEH0E.>:@e7o!5EO33mI!.Z"Rcm`^2,Y+D")B$abA&/%V:f<?\i`/'9t8p
%mao`goe6S*1->7Y.La1d%qW-7d6H;LRC6a@N3)2hY3F:DXpTQ7]YeRDfrh7MIE8*P<*&YM(Og]s5CKH<57&!k=..BAN(ip%o\gjY
%JL7AE>.>Un"Il4B!4YSdC,C6[bOr*o%:pWn7lOQF_WO'#T[Rb!Lm[[b?$uDd\/YA(huDE4d,05#3Urn(4/NW"3cHpBpFIHe+]T*2
%o8!4XcB"E:%/'WHjhZZ%X(K_:/iG5nF)i=ZjY"s!]u*?;""4Dh%VRe98>s6G+()-@#WPj2s/TT-TinO]q"G9%e_'U+([a4CLHiuL
%cItg39u-O3V#)+7VDJ#5e>)<-f"cKBN@n-T=@28$fR;"(8V+#iq!pgh[QtCMRZ5mfQ*YGj1J>BD#kX`7MZ4_0f,@*P%b$tk%Ip#h
%S<;rUa+!dp$C+qqgH>Lq@UUI(Gr*jWqD8(&!IH%`s/dQXg*sr!Jds(mPFb\P(OWPR\eaR\]q3ndjj*CgPHWgjJPA2u>%Mlq\Et-$
%7se[TIa*mOIEO:IU&R9je$66$?hqm'8:9[jq"H[mB-U&lAbHG`cUsYD)HjSn$huS&>9Z@sD`4fRcV_#A``"<Kmd@Gt-_o^l]U6m5
%-H:LB_'l!_rX.W+0H`oi9uK*<_f!"WQIS4(R,G_cbakaDO//M\"SAAZak+G7HI-KA98r7++$Q_aO37./YgoduU8l4kIJ4j_PJ%2c
%#+6i'<NbFfHLn]7.)]%42h%&SqmF0lZ!M<PWQ]6Am"Fbu@HJ^1X..eDf"0t<>.rMcFU;=^*X@_H_X"Tb>BSr'YS"<TS8K\4J&dJl
%D$QJ1@HTJR=711JG3s4.`F\b[::&gC%bWs*m.@lk?8k:h^"pkI/!V&$^%+a^fkn0DXbb^b8ik.O`i-=\fgn-gVFn2OekMGLXfb[,
%<r:>R.aQ;/Z\r\^HED6#jdfGYgS^RsFsbi,2WIMd(YB%=.(?fYc#UFbl$n[X@Lh7=7":W27^I-d,cmQDS+2LPYX,-dDUDU0C?N9V
%3IsXU0jtk%#-DnbGJn3g>*Zo'%^2M77`SEpL)I;p3PM8^?,s4?/,,3(1jg.Hm7?/Y*;C?WHB_esdl.0*@El`p,=.O:*=7+8(#.kR
%7jT&IZIq=<PP2ojo5^2=Rq<&_gVjYP4C!BTYbbs.>R*>#5UR]bi2L/MBM3fed+tpcGN$-@TA_RMJO>6^c+gi<+a4AH9<A6Q"m'As
%2Au-KbAD1jlLfsChpE"BJ,8d=!s5f4`h;4Y?5]Id;[S#/ocYSpA<(/N7!qh728W%RjB>1&::K%AM[b:a[$uRu2nHC*XeU9#].XTI
%MF;7OB@q)F0L'C;A<0?refk/^R,K\BbS.ibkH^mVp1Uer=SYP`-`SDN;Wd<5qQ/q7.a<,oX:Cr1bbNe7mbm8jngMnY3DIiS`?B#?
%qQb:Rp/b?D&i^A23`8^>Ot/=U@d[C2>ce%>go+snE)Dk++<KlL_P,=C\/4J/9>(Pm;OPecrL6S0h,;I?@s+Q0_RIqZ;aRA4i.KUg
%)o<qo?\R$6mlW>nQc0"(b?,XUEt^A<r;pHQJQVeY3D$D:@KC"@ct'UE5^&K%G;QMi?caf#?jD,JoD0Y8?psBFH7-(h+.un^!I!WM
%$Op8o35=d'd6BS*VAO4C7L.nTfVnjV\(+>\)(khbhfX5:]m5k(op>";8Fo5Blr2-I*YBZ3plk1K8RI,s2$T=0!ietH\D7I\>SV5V
%E][pAee.<HC]n"MXc^50TcbM`PI9&;"b44!*c3irS!eqY)e9Eub:r?$FW=JVii(Ek014f-@FQX_>:8THfcq=9c/[ic33A<[F!^a0
%\UE&>"@!<SK>[FE+c.[,4Z]jD8Q6B4__4bLA2GQbbHRs,h0QLZA+@CSA2&C9J8;ZJ'6Ob#X*RMN=1s`F's6cB;'dmELE(K5X]AZD
%?&*(pddoqO;;bt:F6FJSCbc"SgF=.I#rrPm)bra'<BDQLaO\Hm9*a-e[Sj5+T\G;L>eaHn+/$d\U+d4<e]cFE9X.=#@J^C06iY.;
%YAo(40-]k"W6pEb_4(3%q5E7)_Hil:#%OQFKWM80S_?YFR+jJt"<QeMdC!I>AFm<3+!mjSWcgd$N>/LIkAbdjol_*e3<H#)Cs]G2
%iU^Bb%tMZC&S['Dflb*tC:;fMF]TVnQX,8,-BmApg&AT*Hl3:2<nI\?/JFaeYGXVp']gp3E?uH/</a<d$2AS[:-4_A^%1J-;'eJm
%7d!rY-D57YhH,G5mue0^?>cT)LBbD/"0A]C#2IUA75DY>W3!RrJ/M$KGChQPJL-3Bf"-8Fb*pV@8slD;XM#"IkSamm$E2Bj[RS*K
%d]&?`1CC:U.!6Ih0>\Dnj`]gu!us-C7d?BBk\bEJUO\Q.-A;Vf=@ik`r^p&g-W`'^O,b18CpcGnq?^!!IGAXD/,B7tkoI`*Bam/+
%%W/ZsmMK\nFNF<3_0Xq2GI!4tUl6_Hohb-MaboJETHO;ul=l1oXfa?a3Sr\53CeUjdk^_1iH<cS<7jY+UI"53j(%:t(Vm[lZN%+/
%FtdCR%gHA@CL=C53Ue^2oOO<s0FUdYa$b;if\,s!,s!mbPSE!IZQa]q*qX][J8DYDf1?s:kZi?0$rQCtA*aapVq5Buj0.F$)0J=q
%jMD`YbS>/C4"8YeK,s\)Q0ThkJ91pkF1ocAYiS>!%f'H62U^-SS0q%6KbriO\WJ=3XP#;Obj4cE%S-8so'"B@##&3X_p3mbi1&78
%f23fS,a$?oq6+Rn[6A--HQ'MNK8t71JkruCUI/H&=1Kq!QHZ(.Lt*+*@Y(O4$LAP;oGFe;R]W`GNs;@t0:GD!*Vh*De#8AE_WU<4
%]uQS0NpAoL]n^#48>&s)mZM^sID'b7JMOq"7k"<A\=\@H1%JXqnd6j'"mA7aG+O@-7Um$H*2cHCi.GVl`OH)RjDsY[,FA6ra)s`W
%Coq[t@mmP*j\GPuGkA-Srd"I`-D:+Fj[QZ5Nb$eZ_'tL^VVDY;`*=0#LWC#1irVInoB0i?aE5Qh6")#h5_=pL0-WdiK1rh.&,SI#
%jn,jH[iHNWrp<7kJUr;.H^PZ6c:kR,+]cQ0]F5\MUg.\GC(9Eo8PoG-L*hocBFq1!h'N?+KUE`K`QOZq=o/(`.^RoFeS>mks)r?i
%LDIPY.'bM^+&$:to?f#\B[tAfrdnmU9WrGj>;b(afIfKGNEg2L=sMO@"F\Xoou1+rMSlcG>TJDh9lBc(;8/Ft[>7ObGuG3K5Y?Wl
%q6ekX)K+M%6bR4mR[)?Fo/nQ:WheME;A*N=.<U9Me9*#h=b!5-)r4ds=-/$G9qm4)XP5ok349+_E\L<#Fu9ZMRL^$6n"`a.A\WXK
%gV`Fpft_qWc4ReN7G7E!)5S6`od9nXNB^7&E?-br"8^3snDLZtIafdtlI!G;N]Tifi5tlpb>egL_Y7d*AZ[\=#@qiAnunaX7^=::
%F8:D[]P]fuW6k9K&i3h6bTu\FIL_MQOR&5[oNGodWlY7hosi$$/ti&u<K0O^?cP\DS..0up"Rl<jaN0pqHkU&'"GZ,&V#?Nl#X,K
%#1*0]^61E4[qI4ddJn"qpL!C\?eI(s1)G"Cf=b$9N%97PZn*CeT<#>g8*+Wfr%!^X3BPbG%He%EW%4A(h*9b57/Cspc(>(jo<>p*
%/`@W987*NR0(h-I/%!^.hNo"MW#iIYpbW.i,:2VoI#euCM/Koa,o*Qe`Tmt12;%^[VUA,l$VO5Jg'5`=;KTRK>UGH_^1:iOOK85*
%&<Q/39X\8((#)`W]67Gk2K'Z0eSErX<63"i3%_\i"=*KC&3Gr8CRVFqDJ="'YeBEc7<2,'I"hKirH.6%kG@kGNutHg5:jRRmdI7<
%2qlU':KL=1[pEn,>$cGMW0O][]C+G:S*litNOR6*]X"04QMu-uC89UcG[$["/,u3Hm5p'M.=NqA//rdlf"P`<DQGM#3ZFWVjs-=,
%A$'jR*C7C&k"hS`.;c0@iI7Kopdq<Lbs"+t1fp[QOXB^X>PD13:X?VkmpGYZVj6B!H*c#BD=;[EQ_(^2H<Wi8mecqVqLeN!:%?k\
%EAVdE]3]IC]mKAHO5*#EqsN`PPAmR02V-3_^20loZKFm"ja4\CKkJqGRYL@?oo78'Gl6[:Q`k>W5HGph:V2<Zmun[*aLD&cMCSSW
%=F^2*]aR;emM*C,Hu7;-pO<mdX4t,S/,o:T\c%dT%9^W)Ej\Ed"Q(#].[q19bsLC=5$V=<h6ZN&j^0Zj>M:JfGe6r]HOla]HZA4j
%X\pU?iMYDXk&KWbVH1^3ZIc88rO,o,qP'F^hg>3-V7lLk03?lBrrX3BgfSoCC=+m+g:K!W\OP\sq9n;)CQH."59AE=mnr9#b-`bS
%C?]P7`C![`008P-F5DPrHZ'ePeQUp/R1<B5HG$Jf*9QSDm^_]CA*Mi>@=.suqp"6<_:ASFp1O-F'<fd\]!VI>qK^UR](:WrIF>Vq
%>C,9m]Rs_im(R]$1k;SRq6NM672+msC<9:Zm^t#5.^.ae]!_10NG2XFn<HLP&=UTu]"MtP02#*Lf(Di)ml+S\Hsq<lRuCs.1q/<n
%58[$hSnp$K`MY)Eog%sfYHLs@^])BR)6]FIgW;P)1^'(n&MN*9IgKlKnK+>iS(jH;q;NQmS'8.8[en2F?HF3%^Fp=_+2.TW=Y;qK
%Rs0qM^'SuOI<_79.HG]2a8<7d)aD'<T$T<>qr>Md+S:k%rNpjKQJU`j&%S75iqN2&L"^bFdG"-d]p#S8nO#`)I.GPRp8ZC:K`:t3
%o9["Yd_hDU`Pq+8_+oZ!@0)HT\!;BJo^lGbLMZ43l^'Q]%_B,j#;<[%bF?+og]Ssu_t_Tm'b.QH*4/Y[1C0JBWqT94DsL2W`mu4N
%(=U+r\+QjIdE'5eV0k)oHL\WPOdeJgkV.[;St:+ON$ms=M5hAgB=YnrMWn`$WO;G:CZ5&"2J9*5HnlN,IU/;*$t@0Bm02J"_Yr%p
%iRH[FgKZ4>\,,_hI.4D__Ie;($:<PkmQ/*YS%H"/3'#g]G\`SRHTCPYq>TA6loqVf)]8MHZd"csUL;`Z"D?]:!_nk?GZA#n@Ik`m
%k"?fBL96e.'6)8]HH3rdS#0UXZX6ubTC2-uibj0]X6=pdQ_$>:L5-uL>GHUHNjgp)NgFrkG2BLjaf=OmQ?h'@UMm8iq=!/)H+r-[
%f?>8*I^i$\]Ng=!BPf@\?^k9o=1lki^#RQHeEtHX]Xq-(eY7,iGl6L19C$GdMFcNMpYgBCd:n?%?Oj0>NK_C)+Rd&[O6k?i\[V;_
%SO'd_\\3XAFoQf:AY#Z%?S>fU5!\^nZ(=0aB[sQBT;dNtW;j7!Yae)hl'@"d<lS!TF5cYMpO1;-iDU<[6J";m"buo@!;pb.CYPCi
%P2DNd:1!VYT6'ne?53%0613LIqX[%>5eaoVGu2)E=.aeo\c(B9h>`^j+k*COI%stM]e;mAACO*kf:VIF)P6]/I)gKZrOcRO>WCW:
%J#[eSV5i\=V\^Es#P?K#-e)2R8@GL]4SQWJ8^Od2q/YGi&G>rr5:m)OdReYDArqRS[+6#/4l)m*^)$r@"1RnZnH&`V*/LLQ04#VC
%Z2D,PMmI.q01XTHeaY&p#bFM/b!TW@Mtqd8e"cHIGT(\=Lo#@D(M>>%C[BDmZCB09'A[#;GLd)cm8NlEF"W;DSq#_b7YJkU2[L`8
%8j>I`*KBVIf1.Hj)*G%[kBk[q\8W)ZC!9f-,(.d92>lVb&ZQ$h,&mKfKkQj$0_ONr>d^%Xa231bT;!M%VZX\c2Y_*k+HL;Oj3t,.
%EaO6@\Vr3@J>X9>0A.s&,Jlu\f)QkL=!j$IXu-^d8@uBOlD,ed`u&&VJm2g(T:ZP9MXb6.%o7jsqF<Gg[":IM.I`"L@4\06'A^G/
%8Q+Z\^?`*+^eN3>P%Y]u+(TF!8rHK[hb!V5V!oH<,9Mj#YTSpN)RD*.44-j:-#?!CqV[E#S+'kSi8)Srf#E@3JGaq-1T<Tj>_BEH
%8SRMFX,j;c[iT.Ter9*3eW283Q+LSQ'[J\ohg'QHW-phafW:VA\1bEF@:M:Qh5fA&Ub/nET%tE3CP*Z=0=?&1ZM7C8_VOUu5Pduj
%^`PB#CqP,!&/7ldH_60K?iJ+o\!0)cF*io+cGok8p(<8<qSp&aS7[U`Mq-EKrG[2HgK*q*ViP^KIO7SX?#-dPI./QQ/t4?tf2C^k
%:5\#Jc0'M=M[cU$]qCE*D4UXamj,QXUh)jk.idK?^=>=]ZgH0@+)L5NdX:\%muJG("p9a!H0<Y+j1M2W>hFT'0:eFDSkET(`e:pT
%c&#pni$!S5l[(=74kkFgcf+9)1Mo$uG`cVH[u[Qg:c%9ZYeM3(>gNEu^<F2"BSOL$r0r\l&+a`-IHe&:CqP"i]HO4G\ggDP:Y_;i
%iq@T"grCBS%j4Xi6*Bb5HWMj@jEBCo,dJdU'cQJCj=6ch;#8+Q+3&]t/73Ts5-o/me+DIKb=`:gMU0T9Ku@VBee.n[cqhj@B<BoY
%6*R_.^E+B(FG173r]gj\B=\!;`Y*DYq4T9b:Nt$B\$lG+c5o(V$"%?=Lu<gZl0M1(oT*4W[,T!@L]kG&Bu=(EJc+3%-#ut.O6r<3
%<oGubc(CDbDtQ>NC#2soT%=DkeVaH(g<FQ<DuPlY8+F%%IX-0NCU;CjH^a\\F'n-Hq<k$(^/lbsaM6EafJOI0T"iiLm<uX6Hh2R`
%*F/1!KD47TNTTAO_`R0)m2Dg%[f3A7'=KPf*O4d]g&L<9BptDE[l2t-e$o&9X7oD8L,J#Ug,D!A"lhQjCaTGEC#tuMm9\XGbATJO
%#0u3!f3GQRE[C_C_#BIujhtBX>i'/OIdqgOiSq.;U?as&5g.[^WN3_7Xi&+^VqA&XZ$u>QZ17h<df%_FV>V<H_r*V?HU:b?$?\I<
%.DBI[r2(q11>Ua>Hm54<-P)0%Nf?alGFqkZa)"4bZIP"7?I-WJQ%4k9>AP>sC7Ug:iJ3]EA5mCE-sRTE75Q,Am[IFVbTf$Se?d$8
%3eOL`s41sVJ]3\^h;$27W[_ZWpuUgVZ$IHB7jPT`S)!h;7^;I\N[Ufjk,g"6#oH4?mJUO-2>hV^e>R]-q^>gtmO9&r^VR>a9d=_n
%Id;L:4T'No1G/Xff#EdKf7d=\S]9/L1>'9eO,sri6O0/u*^0@!)mjE`IXbrG?`W\E#n/6NrN"NKTKX/gDr'+U2o"c#*KnCI#2+(1
%\62rirlEb#_&F#@msVGOo_d:2NV02fmh`IZCS14D]+<TMRtnU'\\3Wl/b%#uB4&=LRB!]Z#)jsta,c,4T1]]'Ja>)sam/Qt@E\BU
%mbcjX3kTP6A+>p_QEU10Q]!L4()PWakt;%802Cr+&S2*Sf8f=fT+7:>-FLG:fj&je*[gV$cDu)Ts17agDRUQ\?(tgm\`J!->Asr@
%c9ZVbi3NZtN:"s;f(Blbb2p/$X7+*LX0i1N?BMA!SD,NBI/\*;jp'b6-(8H59Cq`sf0R)ske4.#m9BWo$bn<cESPF(ouUBSF1M*<
%OdL5iDVs.Do'F$dn,_I]a26sO/`#ZQDL$@Sk06j!_m@5G_Rl]^#Xmi>g:'808c<.[:3tqj_JI^h)-OiGHT^3.q3)ubO<mAEl+2qb
%IQUsjek8cq5h629p!0]!nc$"0Tm$=96hG6aj;Lh&S&5MgcN^bce#]p.=3$A$DJ++`ji1K<Pr-\Wg=@&ug+,H"&pbecIAsq5*XCRD
%D12i(pFi0rptgI=5dnJ[O1FE;c9i^kOCVfNMLYT"^O059e*R:;4F-9s_l+h?bAA<]]O6ffai!-.Rgt[i8.E8hkBF?A\M#=7KoM;0
%kBA#Km9K/E/2nOop[J("]7]MAep=Tj=:WI741@.LhhNQuI]In<U!+\/Cmp7mq7MNLG#-TT<U@K:;:_Ai?_&i5nX_n!^A7;5m:1NI
%(.lcq%RU)3Ldo,9hfs?mcq=fH`-p#`B(r;U)lp0WT-Z%4qWGZ-^""Ope4n/r5B8)K&c$LrLBC'9T`4.3r;&!3GA&?YnpI?:I/^P&
%.4u]ZD6>PK^%[g@o&Gf/q9BZ:1=<bF:$V*3',sb`C4V&0I?/3SK1Eo@K/WOX`pn>+'t683^-0*;FmJ-Yqp*f2n[R8t%\_X-o]XC@
%P!^>"$HGrE4rZri%4h\oiEJ%M[dJV>?8G:<m'QQSah<f&Nkgq$D<9TO:-@suf"uV'4WMg5+>#bk_tC3P,^N+3+#-M(=Uu;aIAadP
%SrBLYhfCk/Dim!XoPA%98aB-7.3n/7I]>S(+O]I)Ir_0o[5W0Pb0)^T)/@5L%)km<\n)ok<Dp<88r_)Qe"E[AZAV*>ocWGb^Y5E'
%ppcf/k)L7\R"hjFd_BOU"Z!*:PLW`-(?sD&qmTJ.li?_EZakqoijc\L-$DIcj:(YEef,g8DoQDNA(rGM4E(1SJ<u`ZoN\)eB-0(t
%S:6DjNhscL5.sK0Lt'e<I,3PebFXG`Lq:Z$GRo-4*IFh;a6W,;YK9ncX65C1^0Y`+]AVj"-nV.8O#E&Xo`n(c?4Z;C#J#.@6r)bP
%P!)9PY?C-+QZmmX,6R54(GC,#hs`Js2_2An0BDBQC2[tcHd=?K+?uIdQ.VX64$LE/T=k'iDVmi#@MQO"q7W3X"337M(`I2Y2j\\/
%/.iB,Y$;5+j;%4FbI]V(<d*-F1eg+0qi1:Femd&m^GssHeI2^ir_[pR)15otZh1'b.Hh.3Led=%n\Ud7O76O`5H<OB?.ZN&"LWAS
%J)ld.FR'n&LQfuQs/a[<,(4$<iPisOJpMe#=US="T@9t;(6_Z]q/O^B,tmI"Q#KQAp2^.0lQi/I=T!Vo;gqJ2@+/4>mY1%dK"1W\
%paFN7c7q-:+Nj4A"oDhhmr*&[S.MsopC=3uak11NQn\Upi>'beH]sDQoiJ^&jUF8?PD>-KBp_@K/%s\m3I`?%)lB?VJ]LAH28["S
%<irt%hL9b5HVY$q$`BVt\)DqphH58;I4`0\\UHWc4(%=Y4)M$GIrf,eb?M8C]f/T=\br3h6N>LPWSul<DQiK@*tZQU%i_(Y&%@HM
%?W]_pGOhkEdPWKUf_skO*;19Vg[3lI4>*3bmd9]/hB+WLacD4Hj<d%fZ*h;Gd6nkqW`Vq`i^q>#NqPJVmk6i\n89&Q(kG`YV;U`B
%S*McY>BdiboHU*2eS=2ReLWr?c.?%H_6XZE4uDJ>](pgQ:I&694mHm4qpIPp"ig^gSlQcQ#<!Yno"Y]`DdQ9#psI623rQMq\]3#g
%-^JfU6[go==Xtia2?q0L7s=:O*oZVK4VDaQHMpVsV7k1q]_)d2kR5Zo^6`O)kO/YmSA=d+pS>-!7OMiM^MY>!WJn%YKCslV_qLm.
%qXV[nq4,44NUcGgYT)`YfM9!bqp>FYdr1FdXF)>'oC=p4XsY<B$$0KKDf1cA#X>MXh`&<f`I5,hrSH+;d&_)5rG_V!AC&E=+n4CE
%[l^4sCLL/qqW#`7[hcSkc-;-Xki?)&0%R\Tp7!@OfIquahiKGZC?kmtp"`E5.j+_R]`$\j8WZ4)lgdX8T\+PRrchRpqNsD/"nKCY
%e_l,N-k@DPDiRlE*Z)T@52Jkm><EJ/s.k:mY8Y<);`NU3Xq\A2L%cD-!5j3Ua.9>dQ['ZcZhnIIR6\SR"Po&K6k)>[Z[$Ysl1DsU
%^snua9K]M!UcSp\HjVk2_Oe,G<!VG>X./3hhj8DDVmgiY^+F^e_%_A5?ed\#q?r5d5Q&+$^%6Wt?2a9dLisGLC"naU:<SV5"p2`I
%rt]='5E^#8GP07J<)lRdE4E:NC+1:n>?W@[3p:B\SiipEhVN2,%GkuO^)NTTLF5f3H]FJBp1s*S[*loCs50#i`u!81YC./]OijV3
%:Yq;Gp]B/uUHIW1^&@NJn5Z[KXgRG&m_YGVs2h#l[Dl@_e'1p^^%cnQFL,ksEL+G-K-[YMH/@H]9Z^!T9$u7Fbb"SnQOD[rEY%%r
%Jh)!D:4/Z?(FI>7_^PIp1AJWK3#OBbIn%FDA*N47s&rggN4G<)2&HpYR:2.A^YLLT@KcOhTOk%@+b@CfT.%T<&+T$Ar&$ASrko^q
%Xm!B:Z77OJhoqVGkW<ZY*6ms@Scb((.`iLVPiTaWLZl'S?9rAZ\+-t7f!PrGZXO)]eoR+3;;EA\(lh=M^7-u3f?1U(eoi$e(*i-i
%b/u[HDYRm!Z[qH;R0(VNA-9lg@%NQ>D8XTM.dO[K'=G>"@sM5+OHIbgLDK/gqH;/8I2P6<D*)62=_4&)/0V5!LCT6.@%q/hA0&__
%cr#'kh^&]6fS2]Pq\a,S$l,GOce=]HU7^[seB_1&;Tn!I1q[ZD!&G?!lXe9_CO<F8C@GnK.qABXdknRcG&"T@DidF".*Ik*3%A^T
%L8A*jNtC=_\7nRU!%l^J[Bg5;ZV?e5(1[]g^1$Ws7b2WsC@Ps<[U,i:(!fB@1Ru8"DWkTb[PDMNSH)atZDL!!?9Z1,T=AGGDG3)?
%qS:?ZQAq*9CmQ%Lh.Y6LQ;-""+ZB'rNj:G@EZNIoPF8h+cc]9u4MiIAXlq-bcI2EmL&sQ?^rT\kTX\puRXju-XJ:/EqRThkqV4^,
%[0)o]2(dRK-He0D`QhYAkt-eK7FR\n6A?ok.ZtYe1`;n*1ur1qAN8-!GYBbk2Sd`*^4sm*-=ZRpjV+:2ic.(p,#lu_XFLRRAcTIi
%I>IqdAa7"J%5]_OJrW>3k5bZQcLcTbk&gbM7IEfNFou%nd==_d8GLLL6/]nS)5id3&M*BS&<oJUEEA'aTVl`DSN(%=lWB0bZ@/@6
%LgU(qe@TiT="m(-CC2$nJkq#$i#*^OBsJ/9*_iNlkpF<U*9g(+jTiL.kc4])J9ieOcXDtF8!EE=So1i^>P_6uAa)[FGRuHmS-?/W
%O(D1@V0Ck/^@]=*Qs,/FL5X$=`2h;RRFj(M:IeRa]Ne8CqC4_L$*Df:kS+c:Pfr,_'#P/01_H1@m0Ms$[Oi=C&OH;7KoU#>Nm(B2
%8Ia8a5TAd".9a$ZG]a$aX=JNneALkuBm"84X>7)9,oi`e@m$7n@?XfNrp%3Cmqk6F@Qhd)D4X-5_RfhkEA4RF.qOS"JfVBTKM0+$
%N[Ab%i93#((@N&i`&<9\&p[)0$q4:'2-H%)n3iEWN\Cd.r4l^N6B#WA!p%'Zl!kJdN\,?HNEuU!A(0FOm6:!`11aW%5UN`d,K6pP
%L'j._/_RU,O_9CPC8BZ(#"[(;T,c34ocsb"SsiRMX8sE)9kR'<-<O-*NEM*+PR5W6/e'=O(+eja&Rd**Z_c3*?j-]GfdMujZ3g@N
%&9Q?UZsY$cC3>n40o>?[V@XKPJXT-237?>d*e8KZI*K&q=!ShTI1U`S@5Q@R?t<(^IH31UTuh?r2r`Q,1A.`?#@V42XEma-Djo)g
%G^;>&E(*5nX3$=>.lM5FN"Hf_/C<DPJW`0pLkA7W)&AhTR+(Q@I6ht^:ld08TGEfhq`9br7suDq%]%Wdnt@Df@>Z89\;"e*h"'t4
%2`3U+l'O60V<DPf\(X6m))QVi1dEtGWW]TT@XGsU&>1Q[\<U&NM-2'l^p%3O:^b!j:Tl=@P6@ZM'XaCF"ZL^m/U68R8!Bdq>)CVW
%I4\kB&5<_?\ff":"HKlL.hrdY17A7:_V3&]7MAsB"URd^<3^&SBY6Om5qcVV&k1Q`?8>]PHDj]W@UM@DQ4AQ_R8_nX((N9KVPY_U
%<F4TTX2Ug\L32U]@^L,NP2F\s3IX)glS4ArX)_d+^_*?[eeki(9.8UaHa:/^6aFrQQA(>A"B^]'3fTOJcXTl]U!%&C#GNp#n$&I$
%[a0cuRJt.QLd[@36/`ZT1Ke*G&V@!_,>G%$4A6*52B^!]OK*O;[cK3)/I0T"#XoLc%n(%1e,YS@KItcOlge0^U0>N8$:LmkUG;mT
%)c`IfJlnpB'5R;7VH62[1'cqKCb8)r8rV$G2OtH)%A$RY.b]F7O<nc'&/CmrI^!C;VPfp94>1)1Op`<fVLg'@A.]rd(A948&\i[q
%TT9eNN@#T&YUP!WnQk.L'iI5A>([)!`_c_7!^/i)$AL>#.7,>Mq+Sbh=JXcC^_Y,<Y],>-0*\j.9L:tr4;-&"_u3tVJ\_C)c&T"Y
%a`0RS9=E)'OmR^`kSOBI;:86s\-*X#:U*T'o:6fP9csI/#$HHl(FGZr8)-l#i%Z(RN!O><lj$N":B`=$9<_0s>6V"KeRCCd)YHL@
%R4a.'W$;R12AlonYcM<PO@o.MYX(NP3.M&R$7<\>!E5"))V";j5`X'qA;bO^*h/HT+Wi50__V@-$dr[@9B[G$",fDJSLTCc_`D[C
%8K4o8H:%*f[ZN9ETaf1q#g\9@;[Q31HdW_;Ksd>Q@=7<S4"`J>6249K=JWhd2H5VObt93h\PQXl8]0%-ORr^I.Q@MgK`uK`P6-Y_
%?Qs$Q=)>^LZX$]T],&P@f*8?GVLdb`ieU,r/EtuR0#KY!$Enr"?_t+qX5H3%8k]>M"cbj1o[KdRMqk+/&$!QY"-G8A9G%rEUM@&^
%@EW>]8%)2Z9N;apGst"1g!DmXE]b+Aj>+j6=S;OGQ&()a7VEStk,gpQfs$3f`dPmNUri<^YR=#J+/0a'_0?.R5V/BZ9!c)]4&+d3
%#;B*lUm&]B!S/("(NL9^>KU8d'K-2@Y9"Z_Lab"HI@295[$WTWR!6\"5/IFR(/.8h5R&Lk#1AWUHD#'T,[8T+@8<9EPuAs8$HG.p
%md+9>e3"!4N?hK=Wf3kYP1A[Q#SU;I/.(4#H!Nf(!H'1i:'C#8nLCN[eXZ(n+2TU.XNMmu!'h_?TG5D=lUtTO/O>I\2.PK9i`BAr
%O!qnSD/06+%`^hB<!%\39S]E.23;;P<C6?D'#Ajtc!Wi"M-r\8^s=Aj_Y>8hQ\?b/3NbJ&`sb7s9.l(CSS0uk#RC&`qjA]caE"'s
%g'Dq2>W+HFP1(0PMeJ,="(M]eK]rRPaJL28[P^'U6Y<5?=mdEZ!)^ZuQ%Ue5hL,qLfhu@sGSt0N$W>[[:XUGc_=Tu<#YPa)F3oP-
%/$q%Id"2'3=;0,:LkH'I.bB@=E(q?!nN9o11lY'B5Ca0DT76MK*(4$/fG,&&VM)>ZQjXCB5\Q^A*UF$8^HqI\^@mgcVHQ]p,jE7^
%c*GT.MnMB%QQuPO,`H,tK+);P.8QuX=qq9^'H@rlaFk!WOQf0t'=.IOf"NsLZ%^7!O;$A36nB[3H'+Xd$RCm'kR!c;hef4/,gd?2
%MKJ,IR$A4k5n&C>iPcpEKdc-lSKE,f9$_%!DB6Y4Lh,^nh^?XNi69<ZcBrPrWK.G'UDXU)5Lc'Qcja$2_nsEMrKK[m,jERh.k['B
%XXsOY`N]T6)pjWucGc-4M0?\*!P$g8@3lW564#iQMdQ\+)>,lFs+=!2g(s#c:nEFJPOE1J+SALQ5p4CJ2B1.uPG/8eOo5[r0.:e#
%Ca[,A2<>^,,sWOA=pB/8&%.#oS*#7kBYjE5KSbB'fa\(B"Z''#:6QJbcCCLMPh9fAGR/_#dL4V@#'/Dio+8nd?d<1e"JemM0%:u5
%163]5)>KYC'iR>-(PEb;9s2.R(f`akAXBX]>(E9Z-smfT5X:H&$.9IWLjD.C&$d=(G"?\$UjN8t)&tX3NeeIl6Hi4u,mPrN5k8^q
%Je./l1haERYDI4_niY`"#:uQ$M"P&M6TBbA!,$[Np5)>)0JuChace;Dp_"hiTbnfYGI`j7cA$Xu7YaHQi2/i5pd$#SXMeL/_o2+'
%R,L>h3nc<@?-P)`0W41"(/sHW*nU\*(6k0oMo%g%6UV?bhk_QJGd'KkB]03tFbJ=RZD/]W\'i"Lm<K[nZ>EGVB#LKqE=h<.NXF_^
%N`Xqj`Y&Ui$*ZFc#8783+gp<T/?tl6HjQ3+#d@G;J(:IW,0Q*NN#O<F,i%DM846$+%JN47@ffuH6X7n]EAZ1pAeZS&lOqc$Z^@hY
%/-p%tnH]8lY]c'PS>JJ,%X5]n7QeS3,X;H*3%etj6kMu%"'[)_KgDEP0seu85Uakj#Eqt;YqfEWLqqqn,RPN:P:U/PDR"k9g$PL9
%Q&\n8$R!KF-R=mD+^Y42KF^F1Emb[<*ZW;\7WKG>lOXBn+X/OlfEqnLN?E*n,fTjonRUCO7"lb,D:V*;'&rX2nh!Wj_)6Ln%Tjq%
%Mt"graUk5YCnC1F:&58\gu"eMLC!#LTHb9c`5a,s!lKt9L"I1E(BQXL;*3\B8N->V6<+'`Xe$^$MkN+8idm5g+$q_&&g8\ig-!^e
%%Im4G1l3a$5dmNrp/\8[5VpQ,Ua%eD@7LeX&U/Q8p,AE;&5bq*`#_jVm0Y(YUD4@sr$EK-dH"'>(A#'Vj9/BmXm(NXm-udu^p_)-
%-(/9/o>1][Q7?90SMpNifR%(F[7J49<G\0\7jFB)N3Za4?>(IU#)HmsOl_3a;A,-h73VkC$^&</8/`46TG=o&i\1?8&ucZ-\_&YM
%TnR"c8B0bdk;\1f,Js!q-t75FB>-?_+sk?*c<M-^&euP?6-P/1f(9RCE*174`+ftt,-=68nF/i6R%/Xk$`ksoBXEkLbK$XlNWD1S
%-&Nu$O^YF+;c49\+!_/Lh.R4eJa('1Y]X;?HOaRV_9QQb(0N2o]+A9q@l=T83RQbWA<ZinCk,qdA>hVR.tOPA!._&!^u0;>OR4Al
%$0UBrdEk4>PV&7ArO`-E(9(f#`<Q[O_MG)L+u`cF:gbKIMgd?/L_>,3a"C%HHq/X>Tl%XnQV]ZN+_aLX,6t+K[UIP'd4lojKsWPA
%fFfaU>Zuq\UCoCmeM`6(KH>h8`TB9s6!u`M\tbX]-Bo.UA)N3Q@d=FOONC\]KLo]FNe3C2JdtNE#6Y#:#,6ZbAqVe%,6u:rZO)i=
%E-,16.0pQR0^k*F@sWZn9hg;hLi>K.e&-1t$%4*eC.^!.JGKlr'#oJY9*_Se?596,Rk2sSLt/i\/Zg_%9l6QGE86%)8t]BJaH*JN
%lnEZY]KT^8/g0a=DZX&Q%Nut0`k.3U)15$i;F]#"8qQteP2f6e5TP\nC*I\.@hUhF@0U[P=8W=a$`*XWh>1sCROh*&#V"%V1*,=Y
%%8l[S6KUsWCdufgk\Br`6mG*Pg_<jF/X[fi&X%*84bMl^R"S'<LG;qPW*YoT=&Z:OVo+M..hn"o&<Fdr&hnmq]<[-@K*KONQ@tHI
%Fb-N;aoqIng0,<,6^!/4)DLK05Fn_t8S(\=0f03sc"+*^X2Bu'Jh7Y@.R6#.4rR?M>6k]KAasJkHO8Z*fK<';8sVeu7&'ML@3CB5
%@Rg_]6@76<c+n"_\1gW/r+n)'R-<2C@NgSA+-U;E\WJ9dOZc+pC13)![,N?jL%$L],D7er).e4-&g[9ZJusf]T>MNKQihG`\lG!(
%Xe9D1Br,n#K`W_8`Pnrqcq#pOFM0MO"T\kWOiDI;!FXc*!h!ST%1=^*<pUWugHc4p&gSbr[U;@VM,oP=c\dGJJDFAV4*(Iok4N/-
%Q37SMb=^=&d1R5A)Be^kV#l1$nNs?'2Nc(9mNX)1J992@^+"@$5`C,u.Se:DHF^I5TY;2lfU8T5'CK],SUgo?C'4n07'_ka6H#X>
%Wg[o8N>/LF/U!Y:UTqV8j[^!/bU#`<G36,"aldHY8@Unl-*=BX`o@%?7gt2McUE))R!V9?8Dpe<2<-$\BZOX=LglRVj_:i4l/32k
%Nc#t!J:RA>(l?lVF@ohB3U4mE2A9g6\q-qpF@QIeF9n(dmn#m2WM`IZE14>"&Oqrea:7ZG&9WUm:NHZ[$?IWEoFM3RKa0r0(:K6s
%-uB-?8hihl]gdclE6q:Hg5IGb''*`_$CK,f'<q<"8gM\N(^3hf?8;"C%T+l[`[+*3ZbJuB#Lc]d4=:5(Ag"DL".]Q<WGMs5$kA&5
%r1)7+N&_d'E("*,M<e(7"99.,L;ED0=3TZe(feGg(mrsqj[kQUnkC.^B3Q+Oj^8AsZ?g&5YrU!Xn=Lpt7+A0W=U)>'0FM>Oa>44"
%+ZhEH7s,Ha6a3&BY+([*!C/tt/6mIOfG.%f`#0^@YSXfO-#'_+2qg/^&aIeZHP(F?G`^Oc@I"ndiAsfQ#g`%_!S:N;,21/_cDTZ*
%,)(hd"5eqF&0Wg#"ni-*E,j7Oe,Y^U,#\TB(&[&POoY)ab?=udb1.@;p7k6SUKf]#)(PuPeR`n_@"JI!,.>Bf3s+V;aTAY##U8h0
%l6G!nnijo>,e[_Q%KqO79SJ@k\l^)`aWYs!SoR8tfeOs8PYE</gfKeRAL2LG+-&b\@:_GCO\MumdQ%diMI7@,FQeWO$#9$u/D/bm
%JRa9_%(N3t?rC$!B^Ft.b@,X!T3N.@FcgQ`KO2IF(ftsD`HNr:MR0!'dS[5W5ph`r0ThUm/bUra@rqF4*."\S)mbQ64\`&S9A&HN
%/2kGA_#dBq3Jg<8`7LSk9SR^iYj'6%NaNQ6)F]d`6I=g."p>C"0bTZs;_eu6!KE/1T[7,sJf,0^L!0gad54uWq4)\1.!e762R%>+
%&G`9ChGSPaN@+N)A=/Ol6oG&KPn57S.h^hi(h1*6C++lpdm0cE#PD0d)j3RK0r$j!$k-n_Vi&/<cVMD$N^Z:3^NP8]@DiqgKBFr=
%OEV_<\:\&k"V"3h9('+SYaY,F('Y@M7AQJ%1(Yb+!MiI4&G@FiY=>/u(^_Eg*R!Q/-.?c@LDYurB0oXu\29A1$PF+dPKkpDHPnIS
%[NBG)KbP`9Q=ri`MBX#eNd+G85-&6@-Ulj]-ehG`Q0WHmds.`h.OnA0Fo*SAeDRQ_K#p]$/$aOKSr6VU!^\J[!\kaTUl!U%`Np=J
%`^HqT5W"mloCP/%N$P&?.a\`c_^#iA+K%F9&I*NcM$:5XFG*7_>X?Op_]@s`W=LQ4&&a]?_.@Rh3NscR<Y45*Mia!%#4f]UR3X!E
%K7("B(<4GAlh!PRg5#orPJAC9P),!@IK7EcTh@>-J=]k(OSHP,E>&fJ9%F7lg\:Ug+`,fki1P8.DaZZA:dr;V;jiIn5"\KF?qT1l
%co7a%0c&c(](hsp`8oP!0d9F%^Vj`V7O`>`TE)M([6K69bG@6"C[lg4NA2qm?90?ETIDU6b`2Q)Eh+>bdR]rKLh0p/qN[bS5]d.O
%'a)b3,+$L+icAfk\Qf]n1G3E0rJLlU-B?oV-IS-A=_,#DSc'j41!M+-`bL3CM?=@QUQ!5\W?LOd*KIHL@,pPmq[c"lM?L?tdW%I-
%908E<QbqjFSBdjoqHW0?;AT`&G6DTZ.$9%?QEJQm[(<#j97/-UV;mS@E.d.mNg+Pt*+O4]N\03^3;^:!j"_V0@?**^FdX$TVD2^;
%&GNQ.Q?!.OBeF.fd+.-U.MNIcNN_M<8=H<Z;,W1n&(7#s=,5Za"Rlh[1NP#Ioqs(g'[1=JjN5&%!&:#)>#A\+OKS?;e"J*@4l^fJ
%IEen$Acr0\)^ZfcjJ8%eg\!StMSt1A$SR#H(NL1s4:X\+%#?AnNfA)t,%I&$8#Z>n?R3MZ"[JRq(W]dM9C_Z5R[b$mW(a[B?XH.:
%&uM!!##Sg@6?*^3R]dHn'_4l@5*MS&FXpF6R$s1DSsT5.96cheq+:VoCij-4#[$"Qa.Z0e%PH5n5WP/KC[Q2=-@o5bA4CeF1NEbX
%lY]Rr"f<$?1OLo9O^f\aJ1-3IV(69<ELRFs)5q4)UF(ngF=*"E%KUZo-&W1%=H?,KoXlZ8^0[>[Z)"f>5!::O\B.%T#fX]Ibo$uW
%ee<cca-1&5jAel&mc?K$LLVA:Gf[)Alu'C\FY6'-pDj>!7^lT@@W5Zc1>iL.=WM<jh3Tqe63G;!!76o,)^f``P.9G:_k'P".Op;u
%E`<s;/%fj<`!?e-`4&MRP;!D71FQBTSNItqBSi*a`o*;$L(Z><gshOG/mR8U[D^:(3+sprPq+h%8CT\pC0;1Z?sM1..sBifkqj!-
%9!CL9GY(rW6/J3cRk&ub8WrS\!&:"CFKS.__i.@sJdNAVmV>B#$VN<O/FtKI_]ec)>i)V6<@*B!Zg,7Ei"eV9C4$#%9Lts2!#a$*
%Iit%O0kH(@)S4LdKflFj5$^p&EK-5#eP$.,YIeg-Kk\Nh]l=LX$A>?gYX#?CBpt3B7qaB\c'Uot=J%U^d'@0fU%]PS#".?KF;duN
%8/<ofq+Q(\\#@P_p'[[dR.W5/Us+p`RY:Am3K&q]0QFFfQNa-,:pJMk'I4JfJ\]]+ftf6EBk"p:84GCu()Pr(JkR$i9'!9lTdp`a
%1En8Hf1g56c&&H=/ONF-!ON99CKOSI;LB0/aD`C\MQ"0<0`pFg7&lrX*+DQ\KT\uc5Y>ionneO_78b,;YToWr$V+(,kb@WuSSD51
%Q2p#u#+e:3EE@)qJV=CMF[860-XcnW%t2XMXNuT$g'cl?0e@No3DkStDG%`RJq6dc<[A\T>nqMjDo^i-@(o-`13\aHn<H#":?'!n
%I4k7t$shIe&j'5<^X?7n%X;q9Yh$pDj[jG13RC)>^`gKWBChZ-cYT0B4C2QNEG<0<=@;r#e!1CooQW;UPU@f5ag!3L;E'mf`YZ69
%EiB8oJ)gphICTt]Gd/On&RUE(+[Sq^7(j_tUi:u-/Q[<f8U2M:bocN+S<6(nR01btO!ut=djc/lQNTUg,GcfKX@(;Y(CB((2]N!]
%N3@2+-RWJ">F\UZb;J$OJkXBU@OJUq9&`^8QD%a_RSd?7LltTNTU_6C8ma41-AUgrqTC\%e?Mlc<KWZ1,O3>>3LsLi-K,@5Vp<tU
%d]DKm[3L<b*&C8!bL"_"0q^l7I^DMOmjfC/ELEU?Btb(\\lh,AH$uRb\o=c#2tKi_!_pf\FhYB%=7:O.K_WM!9(BjAP<cBP.;DXH
%a4%G5K#0fY4Q8q/KrfEYM#\0cPoEXgB9pkHE6[%6IgP3(!cH'$>#8pnUF6S:;rTVC^Il/C!kp&^dn>'#<Bd%U<-m_Sc%5>Jf9_?i
%L&u]Cm/;Pgcc$%J<<%jHLuqQ4J_QZ1c)`<p$."&'+:9WA&;+cglB'7_hkn8X(6[_if9VG6"EJ8]f.&bTb0^O@'r&nVpU)u[c(PqX
%&hRd^.pIPc>.D.GI<&a4d4CS\gmtc1R$qk,S#_8Xmfbn7<!oiA^bl=Pk&;Isk!=tgQYI[+_WEZ:JJ`SkIdD\paE2rIjLdS[hu]&G
%XPUoZ6Sp%o,TUaN$$4)M$Ben(HB*:GQ<BkJI"@S):r.0P9C\QQ"cLaY9VgSQTP>'=4a[DNGpWXP]o&1JQIKTSPO.W&q"d;YJgVOT
%dbA1TO/"7R*L?(#_q,Jp$W1iVAn8N>`'e\cQ;`tgf5I=X*l1dH-=TXYT:dZpVkN2iJKC"JFnnpq_c2/#TQC1Q/dB?g$sfmNkMSoc
%K2"1j`mC'"&Utr_8ju.`f:c_q[KE%u&0G=S,f=K'OXkM*8mfTT72;Un=-+KaqQ#d(0Oes13)3)rV3N#J;^+eL'-b-R.outB*$=#_
%Y4f*CMSpXZ,.Zff)p.GR+:?#L[=m3b^1,B--u-[ObY/%M4p$E64Q/?8&C2`fP!i`nPOE8X;9/ERM7*LM/t`s_<>#gL/g2^Y?/qA/
%NN)kRVBG)5^7+H1Ae5'_D'pDH#VQBH=o)<gk==(r\/-^,).&H\B]/3tVBs\.\loNEY%NU#adrO-h0^@]aH8Q-O:.)GAjcnM1Q/cC
%XcnZ.)4S@a?lgNe6_r>[CW.N?^/+Be<]nMt#H2A[m!05Z1gS44OL1$7cH&VQ+IiujFrYFg!$NR]A?po6Y\f$&d,`nAV#``OgsgO'
%TI[?.&s2RCLN4i>#r/$T["jK4F!5Em3cfaHY_*oVQL2i6)P='WD!<!ST,#FI\3ki8DLhVI;6I\N3JGT_Rg\s)8sp]^P,:nK?:d7$
%GqR-s(;P34<Y0h_'Bc<9Alf][eYhM"/"qa!p_@TV`$i1HdMMKdYReNr-L-a?`/LZ\E'RBs(#m'JlPg+5n6n^0@]p7C[AFG!P8d.C
%727YGgL*Fj@gn/#CF,*`"A9^CBQ-rkXi1p#nT_3-15=guBJa^&7ns/a`</0k[W0'IfRO?^!hDIc_JnGin`oTn5i?'naSf6;aLG"3
%SH'S5C*AF.LuI@E..b<MSOYNC,!^P:]1kMB(4Hl_'GZ5c(m#+VR>j@"C=Ic`CfuuZDS;NKZC.p^9j*Y),+o[I5tWn/8=EYr(bVWk
%\Y0:]bcZ-lh79Q1(1OO7c`m;olClc8Z[5s&V*l5AD``dCnUUL&e>NN0MkuN*1p88G=8J4',TYdUj/&5C922/4Pk-:02DpM'4Q<Lf
%_Zm4(<hrhcEndOdiY!=KnfBE^lW1R)C9kD5iB7e4=B9Sl?i7?D<Oe"PENKeMq(4NLF1Eth0GTBcBig&Nq]';?[%n5N$[=&Sa&bZ2
%Rp!7R!7kZG-m"HtLNX6fO$JcmdXr-JC5c8t3#Q+Qd[F?b37,-J@N1`C%$rDPDC?3#@e_"Iprf%B<pDO2mJm`M)rjS)cppVm6QF30
%.F;WoM3(O`i`a8IBe"R-,qujEO&`EBg7shP@#t7DXrKcWZm;<A-g,Bhirc-Oo"&q6>2WW[KZ(6$61-NoB^hiB/mX/t4kC=%")!Pn
%5"5Z'9IY:q`MikEMF@h"7sb4a$5?,JG`G\si!TiSj-[A@YqE.p*NoHuA1#_e\<P$F!Mk\M\hjWPI&=:G;T3(uqIp7R[GY4C8(s*q
%io3S&@Zpp]9:Tu-Ea#Q80fdLo,ikDWX$C[#cT)Z&0:(8e:-bHS$U>&s3d;]%U41llK*\I"lo$rh_F^o&Of>1mf&@$*?D7uaas&Dn
%h@6M6PN)\4S$6rd/k;sXM]'PPik)s=j\,$#8!>N!>XjJP_$K5@#?d>Na?5:Bo=@d]MGTD#-'HR4!`9q]?.=O0mALV.Djfk,;AtXT
%\j8Qh8-dpa1\El5WF\4b;u+G<<hlf8"<(<t98f!sL^XfO!$Ou?Z)9<6*k#KXk!s?7NOm,uM:UXc?nTZc?kAeM^?b!r,61s"[Y;e"
%P`6mR#.g(%3hm=M%bNd^M2cMXUhUd$PFT,?<X[NZ[2e`tfYL&aI9`+>6]f61mAUnjfWAf'i1pkL+*OcSJiF[*H!o1VN6NWU0e?s:
%>pW?94V)22KS33Y.oQ\aq@tr7YX16;J7X.7Kf9Z5XMaSHOr/G$0@DVF5sEjg!_NLu#8$CIEDo._!_&Ba%)SrS,58/uVLc90-%[8$
%>`b9"&trm1iCbST%pXjrV'^kp,2f5I#XXE+aiBMY,(&;A8W>[H%qS<Ek[g_o:V?MBRY#rX>ZA)<*UH?/'_bMI29PtmSD-A.L3CE(
%>QWfmAL=AibUF&tTG#C'D,pil@F1,Y9&X>Sjp[.T3+%=*Z+Rt39](FRj>u#7_,Vff#j=H$7--\4)b<JgW.h:?D0\3p/,(?;l1$3Q
%`oK0@mX0Vl$=Zs@%A?g->:NlbMefA0qh[;kgJkb'Y9;8JK-)UkHOK*Kl!qgeqbk66(^VMCQ?\>lZ)p-\TAG.H$J+2:W4iUT,)K&"
%N@Yc.TS4:[=XaR`YqX*2fi[fe\/tB=O97<7$4F^JfEBmc183,/%l[!u]b/g,LB2?!PgckL"Jid-;PTp__cLCY\NXbQTJWeqpZ3/8
%WB)H$5jUkn;"Q;a_@.iW-mFX_iC57K]l7*.e#>@7E9_V#$.4[W6:)+m;us$t=$HiKnoXqu[!^I9pDo5YDFp:E@g@oW[<o\7@d0@@
%XsKF(fr\ZlM!*4g:NpoWa<+e`)FAqXHsM37c=\ntb'@+fQILUB;0(=AEMSg8oZaSr!2gfn'LN+g)7N-_&&Wc,h;[P.2;g-e1'U2R
%K:,A;=Ld5!Z$dhJ)d51*k\#8=<BKbg4K7*<f?,m+8eM7\s1-@5j%AgkfccGYVf^%kKJs"fe^%?cGb^#61,p<A]89.+;spj$\7X_h
%pG2O?T!W)@OcS?n@9Lha\GadXn(*&:G+Prm$`,$:UB.ZH>fIhjc,thBX5i0]@TmTR&&@qgOYPmqc:,n@>AVCY5o>loHR[osBLQ:[
%`"N.X0ClG4:=Q<$Ddun`-X79K87u)@kQu0#hl-bc3L7n/[uEKNj]bd>$tQB%>TRo.]%**m"dj6)ao^XgcIB(\ASVBD7HG!j<a[>!
%YOpk9P)DR7;+]gR-QkFVc6YI(D3L>NX;X$<6QLGAMt8?5gQf^se-S3Bi`m,b<h'4?:=07u?Hc<1p=7dH)4%eioTR6B0e?[,0R`J4
%j)HA5mn6JA>(TMadC=a=a30aK&BHGMM4HYskWgoUegd#kTEG5AW5+aaF=<]8LiDZOG"]r:aQOUc:/TWa7;!s(-e*]/g;(W%.SF-=
%j_KS_.EL%4jbodjaMuWh,5fSh6t'F%)J\3NeB##8:T`7]h=>n3r(%kK5>C.?Y!Gp*b=EQmCc=p,&\!EdRWYEn`/k&YOr,bhYtA=4
%dd\TR7cmPW=[.8KVT'baM'HXl.T,.P'A8$pjMmsjAHU%W8jH-Y%CRM%f$_r.Y0dM3*V)Q"^+PLeoo0runq@</K#g%H\KK\Va(=O_
%-bcb'Q_QuoNE_t;iCK&]A]A.=2W>utlMK;deLVuaAOI\(=,]8=6VD>KLbIGNG+U[SF`7FgEom/OlpQ\l@+!Kc9+:,VoZ8s.3eGDV
%[Or>*_^6;R;c-T>M-%K,%"9-/3L+ioEk*!1F#=l@Ys;q,=\hFFd'[FN1aoRSbR>Y)kYRNd"dW75RJOj@$M(8FHRi:tU&%DT3EVs%
%d9?A^07+8cB^=^`$W"g&6_O?ZUrZ]'+[rd"BfR-NVS)]N/A-CZSI"lQ6o'qClk+)-[[<>3%ekPaHm;Z7;-`dWZ7.*$G<@@SYJSu$
%32,MuTEnX16P-MO6#o>a.t\i%LB-i+R2!?@\8cXK&`;e_T+BUL4Ia3q1s5=+<TRlXTNVeo%<RC?-+4dk@lh_a)[l/+D7I4ZLX@*4
%SO'(_5IS]U*8;4>,Y173m&&\i(RrV@jPD"WEfSEsaX]#:U>*8l7_A"X7Dd_H'oI1';,#%aL_tlN)agl'bb]<fIbba77VM>%:6>s#
%^.3&1'hhR-3X3V84Bl(NJg>"<\\P-[CuO2VO'Sl$ZZqd8Cfe+n[b`RuG50$6#[^eN18Prr:-KWW6]UkDUMrYBBn#>@LlQa0IN'`_
%;+c,i.+tQ[JIBcM3K>1=+dA$HP[.WT\W2\q`E1]R1K-3+<[^+C5L;5`To(6-h?%hf6k*AK!9gKE1,_)Nn`pUXP)eYiA0=)bb(3/X
%\m"Yq"]+IL$i?GO1ed0"iGguoJV**K`)f)`b"_/O'CM^LOs0JZFVp/,E^_Lio#iR(2)V4Zgr7/i;LsJT=`W9MnDnQr`Qg1KLE^Rd
%ShEbAL6ZF=?QT;f%USf/%K.JoIlQMkq(C:7]F\.b:H2Z'r%-%b'&2><\81nmqaIQ/Rl+N:lcHbEIH7)Y?Q)Z`)*KuSgHQ,mp#VcK
%HtLI'86Sg7eeFV2NGaZn7"@q2o%Zo4.VOu<NCfR*X2>IZ`5IH'PqB8$Ld[G$6H\(@C.-F=?PMYMPc`C<Edp'rjN-GlBNj5,8Ick'
%SC4q5[m5lVeqIg8#)q&'@Pg&-88'<=CjB9#E*Bs\*@0f5p^>VZM'h<2!rXl>U(pb]E47C<SMYU`,bp2`E-g7%6BEQ0#Q6I=HUM,Y
%_hZDiJ'X6mV;+#(!jn+f*+\oQK"_78)hk/2$Q7U.CIEM_Q)e[TJYEF($U"9Mb]PB*&kekVq=ZRA@=>lJ\e64V"9\2-**_;3M)c$%
%7".7pc]?.JnoJ,c`f6ITkp$],"3,AS5?o`nP4SAn9>&'Sr/%o1(K?7Yp>oG9QG1k,Ok1D1)TtuZ&Ynl)`3M9bZ+`n,*c58/CDt:d
%-%&B7I8uB)W4pQ58[#=#@KK7^JWf-2LdZ#HniWH'J:oKe%=RY91hnX9%]+G*d?J%mA?4,c,8r*G!/[#UTL^nSJW_!FMk/%[[Z\#Y
%n1Y`Ha2-hH-i7-iPiYG">81=I?4p@s[;fa4''BT+,%(87.(UA=PIL*l\c`i=S3;af3VIuBS9!Yf=2d8`8>W6-1D"=9q[3pQ+QCEP
%Yk#^d/.ira(Rl_@O$&0!De>XLPUd[!l?TfH#TM*3UAThNf?FiT7t^(SY4WMbDW2'_f>]ka(gG,"Zit_pSR9WN6d!i[$pT2Y"Zk$6
%;kK!D3S_H3BIJ>04AI]CLA4ULH'b%:hRSo;^ihiXb4@3fMA*W><6*p&rN-/!`2gNSj73R6*^<CP<jlX/(H_H3:e*'6^(Xb7L[q:C
%O<#3ah;6b[An[@:&b0NW?V$<tY8oiYlPe/\)D$[=r:JGY!c."",Bh=??OY*G;Hn1Zg6O)2@T].bimmPY:\%g3=,lg0<HosGDbY#a
%j%MKu.`/Zjq5n3ql,Q?)3->LXO0WCil53"U_FG;-l`t/Y0n-85Unqm2g(_:)*&SiCbN6ALTl`]b(=:BlqI>3Y\UkZ,7@b(^jVoq=
%;Yh"se5DEL;+"Rlh&'hmN03lQR6]C$@m5p#(\iTd:*V_rLk+6CEn<b2NEit-Dp.U*^H0bJ#&1plbCf)k+M-H\Pe!$!a)-hak8TJ6
%?p!0<Gc%F5_TS.n`'D^rd/]FQDp#Hj'Usu'mco,/5'!=+'s,FmLJ^]5!nDnf(b@i\$jCXt5;fN-qk*i)jidaLN6XXkH(R\Aqnq5d
%7i@.Q>X%g?NYs"?hi^6;U+rf;O+rN@mK-OKe;)K8pF#c:"+DNT>[$6o+5C*,*2lA0#FlT.r/SCgS!</1'3EWsZj4NF+s9Sg<MfJk
%"W.Z)$<FoRA::,hgR!96-o))1;a2<Ei496]HYjtD%X7`*6P<E@(UKk$e!Gtc>WukB%3Ndq/s,5-Ab,,r08^*28m]R-j>q0E9Hcum
%iJKY%!d5pC$_hr%]Hb8]+bG%4h'9Ysb-+nNHuYY>!E\kQgOtp0g">@$/qMt:;LO0Y5YROQ&S"TA=8*/,XsMaZ1s,J[E0DghQ3'9i
%`\2#pq]n9/COj3`$4Ic"Ne:4TeAM-WV79P>.,oT+0]"s"LF;k/*_]mI8'#sYqJ1o6BR<@T/-(:K,]Q"ZkZ?<FeBI[[oBlIo*Vr+1
%kgMn%O4;]'_@YqO&n"/M;c@(1?`lg!9]"Mo`><RlYg<85h@`,]*1,+d"lXZ*R1^LmUh>T[c]*ln1s&D$MCh+]]#mBBMVn*S=1pcH
%H><$?nW41GIH;pV#)O)!,HTsk)ofXrYPu>t@DanjKsK*6.U0Z+cH0cQ5*Qt+`K/:.Sqtt-RKI!]E!ob*nO"PLOe8UZOfLQq,1dQ`
%%Mj(J$iZ$W9.0Ld[YG7CY,*AHi&rtfckToGV;ub4rP028@@H!'oHcfC:.;rSn<[O=AKkpK_C/>qa*G?Fq`bA6+aV7)JSsF*kmQK[
%E@JZH&[2cc5G2oZlWdNu-]Rmm'FUUB?8=a_^e^.2Eb19_-WR+T7>Gt4+0.N:_bUZ`X1<9Mb^t(*)YTMT$E!S]'Rnr`j*FW%6;$m?
%/\=[lUBO`qHs[B$dI32J0hck&^:[V09";VYcDZudi8PAV[X\n)V<ILH3oAW\9egecbnY^!;6q6TTiY3('QNZXcc*/TIUX%n@nO9]
%lr-R""2oZl*%q6[_ZjLC\W`]$["?t-hG3'WiO0[]/)T8^r4Nq2UlqjtnQ<%Y*JAH+9<Wukb#u/@mq^%o0i3/sK'La8D-2_oJsD:L
%63T0.h>6H8j<]39:P_eqKi(EM&;RS[E*si<A0;%(A`?m48&+\4nkD&lqZh2PQGm8h\S'6!U#^*pBuH(h>9$aV3&)0C%62!Y_`j6R
%^EkijLjCmGH@o607##@?nhXN5.g-$-8U;QLAq\o5^A>qIf%.fQ0^AIN@l>YZg1WuPG_#C%\]9Y0On*mTcM'b'H&?N[nFJrWY:eGH
%$P0CFpJ1M+-:ba_Zad^n:XhI(M88(7INfRj`jQ&S37'VT_6s3J+$[i^+Vhu"F%YfWJf,_427u"rZ3!=5%k7\T"lHY<T&E=!Y]NQa
%Z:TN\$g7%W&*N55kO_sZ"\F5:QlUB^pm+K9M[Vk"Hli(`0dplK0'X>\4"=LuX94f)n1.)5HtO2W+$#\1"^cYD648$3WsraV)<OM1
%,(#+/aseQ1GKNjq\-1g74aeqgOZZRXFf0=R&X2\tF*sUN.q@X</7LqsI(]S$@=DmX9,'??Mb3Q#3e$?(R"BrBYJ%duei0lPpKZ9_
%ES2]U[4#=da3Pmd.OulAq7\$?%[`"=WoP*/Gqi2QKlRjK!ldlVU2Oh_9$AD-LlpFFR+,b<E:l't*fO%m88-+h^#2Ke?U3P`Ss12S
%f`i+3N=$O$rFUj%H+F2Skp^INZa0?*[rj#Z\g1DjhRD#'E&Y2+<XeCN/0WP781DB,%4bCM9&3$;2l]=ihO_+#m!/;t[s%Ll`ZKho
%B<YlHC(SNJiRGtV1aH!Y,J:),,!fE@c/%-)hE;Kt'[?cJEt7c$T<1Kl5tSG(;GaJ(?5T"X5l%96,=sfsH46A[>lk=;b)#L[M5rm(
%AAkjT6+_[ndbNN@`s(%<=]obA6QqsV4/*+iH[R;.ACVu[k&kk4;_ar-3l8nsV_-jieqjH$$N:'.I"$AoApEF3/S?K8@bE@#?n+uQ
%a-j91OYH5.:u[$N0P442Vn%+.9e&H*8)+]:lL#\P'^UaNI?'ai.Y5&bWOj]/^KoE>p_ijJRO#V:eoI,s\7)]ZfjtU<boN-"[jnR.
%or!&!"fi?4H#pDM@oeb,MV$KnUb(DZ[plA!Wb*t6.+I:BUZ\Y]:/G7e/u]:Zo(H3Z'\6V/=eUXC!`JTeOGNUt%#/M7'en'jjY@e2
%DGPht_(g@U"]>`lLV!C8!5gJ%Z+"FMJ&[1Wq<j8H%'*<dI%O;r/k-C?9`UX@a?otI&f78&*IL]_;)lsu)oY+%96E$-H!j`sa^VfB
%K9JA2ZXeQ>1[PD22A6YCAI8&"mT916\pJQtYkPtAr])gEK92a>NhA^P_%V8b=Or[-pSW]4\AFr>qdZ=i*06R6Q-=e<359>#OZ?Et
%;3Ps'l\ArZToYZ2]g\e$:0cd]U,gTuPbedu.Yif%gI6$m2Hu1!@^a$m)/7aPoa69a07NX,`ZHW3jQ>4a1[bm&g]6ft,fs3o-CP++
%r](m0&KCdsc_c"@@DpY@,lXKhT[hEUNM:f+1-k,`X+,n@95aI65gIHR\j_F*hg?P[>:(L.9b$UuF830l<qIo6W'5t'r=(b+CCgIK
%f/-MH#jG@&=4=0uL/lX^`C?nU[U[MTOD>XCKGfaq5G\*%`;T),\Qg!AAch\>;W91K31q-56lc><<Sa`Gg[@V8J+u`DYTY9tar(m;
%LNWqB7NlsB+03H*e<OrkrU6.!3t&#(!?[&LO=S!i*Fq$5h$7[r'dMNClK**?8=&:<o#Y09?TK0_!H$(4q>+C\]GVc`'WNQ;fH*JL
%cQ08LPKWnQS/NiK%g5Kk&hPV.[G37Gg5@0q!#62PG;38KFK@r!mg7Kn5$Qttc9C'!nXUF#rMKlY0b*bs1Z<[XgO#LXQDSMQ,LuCa
%UO0=ZaM+Nn!G186R*(KQOZLqU=I?OI6Hgt.c*S?Xo$=;:O6B7%,$(g!.=As7\UgDV!_TF#MJ*5/h%:go"pdJO6Q99>"mhkrYg+G@
%+We9]e^p3hLPMj+16k&igFX+8JnfL:G02k/F4uYer9)@c":"FPR+ck1U?eOqCS!@B@E%Qu5#jRN^Kkm%P$;FsMQal:DQVuF`>n0j
%d7pIed3*@=P5<[\Z_Ahf!Zhc9SZ?GcAZZ:K^/1J^7Zja^cndE>H,QPUj`t-7p4ppaa^d>+gFW445LF_7f$(h@;otZ8i>%@sO72BW
%<`5'rfaDVl8+2snmWM_U.'S!7MF'9mZhEAe(G61qU3gWS!)r8RGc71&=fWXEP?k'hF0_TAr%h&XiLe[uf@?%r,n$)M8!6t`dPGrT
%o6l,jb$I(O*7VRf0d3^(K5uJ_\;5e.4XZ0i;O;SkiV7itY)9QgF[-:2\lI9279>eKEer8R=fGnm#jm`]*;$4aR7<C.17](r`)It#
%?=mE*I&Z:=&&!Ku==85jY"M@1?+!^24$!hug0-IJeVM6mlaSFd^sN*3hdcX:Wd!P8@*;W/mV5dmC&\.'\1A!TY$P$\?:"!-*@^_N
%7?h';bt5V)85*:[;P4TDiP6[ZM(L<2C&sdiq&NI5rg"r\:k$h,8W]d4(3D,GXsCs,V@]&6*8QTDSKt80(6lo9*JPCq4R7bM?9^k4
%%2=[rB_e?)8m`VVZZ`epU$M_2.[F"-67mg@,Aj[:Ssh)$)U*/?aX)d8!PgVS1h8j"jE[T1<jdg*k<J0tdbKX`dg"'898h>na#c_I
%g$<LcO47QWA4skc/H+@2/2d/D%)=qerSKa9>s*q-QnMY3\r7TmRd4)ALIZqtJsW9VarsKDUk@bRY/Kok?2.jf:MnU0mL[!J@tQt_
%[fGQ\9h41-@upZa\TtU`)%hnUUi#c$)3PE1/U/+'$:e8f$*Ao6l0QF>mUWFY57mp-+`L!ni$oQCjQ:?#&Xa!]!4Xsooh)N$NtA8F
%=PV@9DaoBnanofbkeq067dUsP'j;L;e@J)B0-"Ki0ISfBHLMa0ij,YtT3)k[7c+Ca$&KC&.0j*lOUO*3glD5>4MJ*!>s[`?13/_g
%FRM]=2=S5+*.03>$dAt]CG"1;E321regeN=,OC%9F=$+84SN:SG7s)3$9!gIrhtVUZ'PuMB4`SU&;_H.VqG]CDo^g@&R93dic2CP
%Y$O?o"<;X.'_ph8<3U]\-U/5iLdeN"[@+H<$W7n`MNbjX5ajV>n=X@bL6bls<'3Ct4Q8*Z_8e%m+X?1Ngir!.Ec%$Bo"M^S(J&ir
%.71q8h^rum<`G&>5$Am!bm)]q%@^RRgmF_3/G##BZMA:=UUh;'"nV6?^O0BAJF4/nZc_JipQI]Plj7:oXcq3?Bc42rL#QKR2K]IY
%f55KtA=-IQ7o-I<0B">-IT2nR)T$iJA3(>8!OW!!j'HQc^KHA6ZYWRHJV>+bAFO-*l]Q\>p2h=HfSU^+FW&2XHl<s=Qf<:_0.K3"
%)uXaeY*fdK86-A^0r6%@@%X,VVK`QW_g,?#f)F'>(@4Ei$:S_i@'5$BHAWT.Sd_6_GF2+A\/$+A3(uj96ad]J*KXDK<49gh4-FLE
%-"JMK@*,bgWa>d273DjolC/rMQH/gTBG`np_%PB.As2elRmH6ejA9FFl8m\EbUIiI_8r^<e*LL)>h\!IVdf=N59>#d:At'F<>tT_
%Eb`="%f%U)%h#]i:V1sh#SbIR[\^"?]rUj'ms]S(h-F]DDUuVJ#&bG_CcctNLV$7IK-403O,p*pL"D"-B1(H+(l'u8lJt.7L\mGN
%;lFFUp3HnjCi;^pqL,5Vd/>3(G?-l5E;04&SV&_4F8mp:,"4UO;5d`,W^WBo:V=0g-QZ>XbLBtC>q82#%K<lY0.H,H.Wb]U&t\?;
%J6[IH3I2>i=Y43=ZC$8P<%DfRA;m<`.XB]f'mlN[ZY&VhU(Seu3O<@`L$4=/fZ'gd\%:1u0WgUfh`0!t[gNOn>&tW[0g^0F4q(["
%4h_:K^.gYZY_';-M^HIpC`u-"^$90(P]m.gVZ`.7.>3H*WXeM7LV<!"c0lI=PH'c5M"Xi4BXfJSR=?^S23U._B.ThUF1d>d^XqI`
%jd"`)K3kj9bpiCd8_1Jqjeq!RTs<Obiur44OZpJ$ROIUqas'eK_OpaRg=g?s:)u$WSt;C#qfM(I`maJ<9qDrc?b)e-TpEI\Bc9/(
%rTGR3Gf1CF>=qKP0+M)c@ThE5MJSL-F;fR#OTi>=+CNR]8TjgZ9eL;:GfB1fr\j/i&lD^OM[go[Mh7BCH\09Mr>CKhNtcErG(9uL
%_BCIC$(&GUFJ1^'j?RLc]!uX*`@=sOqp.uqr@Fg4Tl]=Crdq(-LfV%Ofr*I@E;%5'YK0Lp1[,jS5i>Og`gW2a8R$epe3n;6</\UV
%M[M82+"G=DZg$$-@;C&N87"SMSi^&PH;f)>4d<9'U.V%6ph@8]'\T?*.[@H3OC?pOa;G,M`]J^Tf;:E3<A4gkL0/#7O`3>Hr]-Yn
%18`H^^6sI0H>qYgo^[6\B/$2A4j!4fh_Q29PJ83W[g>1!id_1<#s.*.'-/l_XSn"cgiDJ&mYf8qS,J0H!pI*>f$?F?fYXKlZt9(_
%"YV)=[6QD8:70C.L\$5jU)&C4Sm*[:es>q#iN"f2T^J<+;H2*aaJA[(QRb!4['':Rm]!!`eU`dZ/)%\H6Lf=sH"tK`^3l%AHs^5E
%ICf"6V!4JG2lDEqh*/O7pB1%OlU^KV\Kg_/NU]B<c#f]7C8ui/Xu15$G40WVs'<;A@=_fHQYfJ5Jo;hgRqjs$@%nZ"R\$NJ?OHSH
%0A"e=B_$-KJu]WA++VH#qPa.mHs1MaQiWO'X30t0e//XZisN&'ZYTk.flH4Xd\1RfXeO?i^$Jc^CP'Zecb5l5!2)^EkM8h#\*JKn
%GAhc3DQ7BGS^qH`P(L]q'3;M5cBV[Y1gj=pC0Par]N>9;/sgsDTp('>e\lA$Z6]tb=.[U$8[jHUB#S7Ohl,8P,`gE^b.]M:Dp*Q7
%0<J7k,u$%#Yf/J+f!cAX"PV^[Qph%p>3Uu1SM756E<t?.Y3$OV_#bPCgg%ElN=Fp0)@Qc`0IJtp*_Bcbbg>hK26DJW(]A)+'nVmh
%QU"h>D9PP$pnEOfGHoZ0<Cf$J$CHa`RB#s9:H`R.SKKtu[kY^?ATQCVf0Wbg)XR%#DK_h6QE/Th4o,?>cR\Ore2YNQ[,Xc?OLKk:
%Y;[1JD+`BW(Jljd@WJj=?.!gtYLft@_6f]hn+hE`:q(9`?"JD_6oS"I6)U:T)L&ajY6//aMY<!/OL(I!@p&]2gT4a>"c0U>4h^;s
%[TnC"U.[]tQF:>Op9qYq3G:Ukjfm7^bC%"`fSukI,d:B,o!'_JXfd!kFAH3s(+nk_nVkEj:0)Y*lWK!I6$r'3^L#NnhB[7Ae+2YL
%m<U[BmE84b"@qV;H[>cB*@:0Z'3Q/+i_3k6C9JYn"p[]>I<D^=AuMOt\$l!Ahdcl8j4Rp"LGW-!rcL;7>ds=Jf$,2E^?kF7QN$P>
%?tSg)3BI6>Xf`cga37SWkt%+8-PBATbLsiQW-99FgpC=6*3uT)d3Ue1V\StG-`dhdPW6)rTI'm'Qe0gNR&<IT>`>k`:.;jbTG%@U
%-[4Ld3Z/FqZm@F@h2[.*9dJD+@d7^B:j;q:Ct*[EK:m.*3sReb[>sWnPECKqBj^F5K#b7,HgtSp]*(r!@SKSZ@KP68>S'U[a^s^C
%&?+(GRFbA6A@3J:-)_BAD9#h@FnqM1&#^*.#ar%W1_gJBRDTRg-jMt!Fg.WS7F%e3m++)4F?fTP?D'+4?`sB/X4b0h=,O0'k-K$/
%VOZ:,eHCQJaKG,.5Fn*JT_3>]\&ra@`(&E&<.fZl5]qd9phd?6NmXUCMpn%4,K^/*;j/G[XQ4dIj(#9SKqqP0DFY*NX;pIeoQAKQ
%_Y25hL(-b>Q=h16c)]UXDU_k5D!XSo-e+D4L%LVS)R$Mdh?R3q?mIY\jK_2CFE0$!_C**C0MW9;l%Re%NJ^r-.*]h)[32-2IS-Ld
%aX@h53CgTEm.4Zr%J-)W@'Q6tXV(p?c]j$E5Qcm&i(d^Kf7(bA(j[Pn]HqQ4I>EndrIaZ55G*Y2Il66M\&"@2],fjC0=GQ%T(b0.
%WX"DOdToT%`pdoDVu<i=;>P>A(F!3W;HU\Af=)7<mM;>b&+=0q'_T20^acu$V9mFO,bpm!j)3[/47=,=U4eH3\S++=b-kt=6%TV_
%/DkEY=BDW5VYCS2;jA?lOg4E;&?Eq>GjHu>[=<IViLTOW/DF[!N.HSd[PaQ#Fp'm_?K-ad)O$r$N-7CeLK,&@VToc2R;s2<UJ,.-
%L1Ko*#^6WV4CH*F#VsIf5f&Gm\Yk+*NZpe2Pn7?[LVN3HRAHtP`E->G"j(\23jMg1?:DQaOcEU9>d;IXkpVDi5C?e4)r_nRS<#fb
%'CW@YYGQcQheur^cYoq#`X\$U(BQbS=oFBM!.;@qM!QA%=kI=GKqsC#-MYuu))+:^-a6Eh-82KMHNkIa<h(J,3/3*kV^[];>'KEQ
%*rn8B[X"rdU"1fqAkpN,XF"e?$3lVVV!0W]L-sC%UZuVo7'+ke\jPhe-nV8N`\"Z8a'0:4d0bLLaCO`\kT**-l)^ekltoCkSu0]>
%0bWMQ>G?_Q%i'hr^V&@eio5@%C>gKqZb:gfrd:7iI8\dX:WG%Q!6lMmW]s][7RHn;*0rHg(5P2i%.'"#W0_"+J1cKf@n[PA"TR%8
%S^^4+<R!QYk`cF5R40ApG(aK8A(hS[*HPN$?*gqM7Hgb=44DV4Jpgk$2't]*5gWYj<&B]jnWL$3mK(4a[>c<e@S-I`!.1*bZV__8
%b8Q4R.)OosB(raO8$%h%o(HTrQ`U4Ur)Ba?87AQtp,ZI^Y>I3s^"#nW5f2rGEo]AqiaJi!S2pdJ]bao@>>F-?qT75]+qHoX$)M?h
%0OsiqUH8*W2pjAo4tOM'76WXXb'DEGng5GA54PS-T[q%o'JF^MQ/j3Sqe)>DG1D^f7LYZpf!A+@!<K#IZ0]0L:F%cCfP#]Y7WbFr
%K#d'EZD/@J:QI:Na\JN>(6@HaUG?b(H@&is!;lKRM:kq&j*.C,rGqY'?J_`)@9ZBpZA5$j-Am$k5+B^W]6oij=KNi['N?3FiPT\5
%3i7`Zh6)X'@%&VmZEa[DLQa)`8p!@9CRoVWq$KN1Cq6,0``==$V>'4XR\QrLc#'6sf%^[E`.sn5e)t+>>'kB"9;RVDZp(t77Bf[4
%?[fUeiKL?GD$g(W"Tk1+=r9SrGg<I#[aS$u'!eeTNGe&#[GkV0dj$J:Qu$er<_[dA`]I^?]o'H>AMlchDca_4T,PtSBqI[QOqQ_q
%e&prVLCDL_`(YK6lDM-@g5O@a.O`H-;:?-Oj7.FH`p1F(GXlkemGPKNC;E2bEOF;2ps&<MF>q*2bAgI=7FPiRDm+Q*E!5nk8&=4<
%dR6@DIV"6K??6pP`W&p!'NpuOWKO>_e,ImgV)?SYhlGKTn+h4K1thhpgh9mEH>p=sSNE$U)*[lG'&Ph_*K=g'mN`&C$Gat$,:6;a
%bc>T`&stmk%5l?$V'7r_ShEg)X<="qITmdeR6,XB!NLDf(+VV1d@q[t44e1GF`N-6cDX4gn%Kd/IHCfM:-og]P=\J[NI0*9d_.<s
%&tZ(Z?7p=P@h.tWp"T@m-9GkO0E]XafNf>@Aa*1Q>0eY@qH@1%7b,to#^&t5;Pt9\AB:djb@:.=ek$<#lrj1rd!AAqO&4:H_8BnA
%d;R'-pddh&9(<hg9s0+ArCFr+>9-ON#HB6D:?RYkQs/>YNt_i9glia5"M]hd@Mi@hO,]M@PEDCQrn?ZrMBV#$=WgTLo/](KY="In
%#J/pn^ZTbG5j-e)8ilZr]#1G&b:9\DA9$u*cIZbA;VjF&JtK/B'lO]3dAuJQn7`,%Z?2P=kCcS>U9ql)I+hX/:o,`QYi-L@Ti]n8
%Eb8UV\*Qt*k0S!k&P[NmmRN_U>7UDsL6c7W>G7nm'W7.]"&l(o[71"OLRGl*pWM2U6-<"jG(:R9MG^CQN'9q,rH':*5!L-'6]M#\
%_0_XCL*i-:@KccDTf',a[rEoNRFQ\hji1Q&C:$CcQ9na<6dBSCm1aMGfog/+ZKMJ9]XFT:50!q3S/fq#oS;Z3.$8AG_S%15@67t%
%Di$HI3j/CZm9Z*u'kK5Va39f)b42`WiQ7u4;)=]rB=\)A%ot]3)30cDT11N%el=$G[dj/Od@H/Ipi-K\0>5MBC*a[E?H-C+\#?IH
%!5]%6H1C0Bc#4!C8tU-7%\H5"g\hlKr32/,DX_mBC0b7;`KNn;1</g&\6.uE#p+O5NN*o%o*2]n]<4'0a3.t>DYs4.h*LaS]/b'\
%<_2Ms*OL%T=h>NP&BAmRMSio\`4kMbqKBe_+/bF%V4?91IePXmWK2t]fn9"Xn>/.=.MB,l-fihd;Vpug3SeRZV*+P#'^+AFrl^"U
%#>DV-^qo>XLTp=?JpiU2pl()3]RFc&2PuKPRd!WB<LDjTT.?Kg%7j'Kf;Lj[R<a%L0[?$j:U"KUQ7".=c`/@;1hIiPP=q2$Y@\`V
%=O]I"*OOP`8ak#,<QdJ+!(Z%s?e8*njAocq3M^hY,q4CD@W1F1CU[b\]."i-a=f&dL]4uq!`E;>,[o$_XaXL7&^9MR5o_tJ,E;Hk
%\lCa9q6Hn1\Fc1p4.dafE.(MdA0R^kmA8VokB(s[T''.o^ftkZ<JeLtBC4[0a`!`mohL".$0Y]J80FlR!l$q)RS=L5_u%$s#t$uP
%%^aGM;8)Sg!\9mGm[,M):-R@>45oLSf*Q\'pc;sXS<W1qa20u+;1p0+D?1#k7(6-Z?0O0&iFn]e`7(;f[-`_"H_R)!J-=Z0eVIY,
%cj"K>;p*XAmKC@lj-`t?-=r*4&^/`#L80\C60ZKapl)^&<lce\(suBG;]jRIZDl?7A4,'V2Ut">+XTXrp`c;&ElA7C;H]#30FQWU
%R?-*a9?-2MSES)/KPB(CE^.ph@mfZ/j])5q@KHn7P'SN=T[.Z$.4tGMlA^AGfYWmSj8;mf29"MWgKDZ;(sMk_$+A&r/F1L8ik1]H
%n+2t\Cc9eP]s:Xuo@]j>\HVdi>P,PNH_/0I*JAlA4u$4Vj[_@*a:='=d9?*tjjEFClQ]'b_\;e+E^K<=B,k'&Q,^0eZsK"ZFh6%.
%e*=*9IYi"9,Yr&#m)cOCDs^-8g8F7Rb1YMEb6Bti]CljJ-Nu"(**7/Q'ea`?o%6P`a#0D$ch:`/"SLg<cC+%;VriC$B"c\S1&gt"
%Es=dfphTT:Z%[RlO8g>"09iXh>+m%N<^XBtZ"lKO,TnulK&&StIcqB:LY"mp->TS.A<,`535tVuof5nt\>_!R^?UZ';IW+qQVgl\
%7nCd5I7&/](Z].^-*bQ9-a%6B.73S9MX?5KOdn,J&Y*g?KlAWH,e.F<<f;F)3&AS(\.!,LFhX.)+ea"JSgRP*FaC$p4/ajiS$R25
%np0PafHIr$Vlcet3-n2P4kBPdThDp3UYeF?kb6\-L)N=+<c*W<X62[Hpa3@%*X@;GX6t6`Wo4\W>YF3_BJ<`\&&aN+^ZL*t%HJ*8
%6r#u6.6e`!WPoqDp8>siZBSKU7V*6&8!V>/n>_1.Y;(JYb;:&[)O"`]i0[I'[Doiu00Z8rr-;cfO'WYZIIu#k&9EVeFYimm=`?5V
%h^q,I9p'0O(Ho91IX,dI[]L,lmk+W)6]E>(=_hqj2N(\t6`%o)8?RPAXDp+#:korCD>Ffa*a@"o-e9_Y[e8i516\gahDk,/616<\
%jWmAn9ck^s].=@E/i4VhSaN@)*g_#p:DLTj/I`3)Sj"R!;u$^`;ZeeB5?;03lLUTR&JZGj##F.$:$L^LZTk<e6@V'H!985cj<Do[
%@BBf6n+1kmE!bt)&T+d314?:G(n+6^WE4863O`-Nds(]NU:[CgX6IM1U`#/3iA5$)FroDia%g]KhJ\i3obGr?RQbqaHds^s%'@hP
%NN$0(]P(DE#EgM:?*,rg0FG3s<s'tl^ZR(-<NC(\$GJ]M@ok+Q67HY4Pppgod<)L6m="eNhmF9Tj*6@2CU_8"S(INi@RA_^]E/5A
%`^Ap3?S@taCqAqNoYUL,V5`e_h!/\eVo:Kb`e[]Qdajjo#k*YU?u_cV1q]5YpQAZ8)W*=QRT$\m+NqA0-5QtCiC9Es>,TPt=0N@D
%$c[Uu?066YRRLPYMq0p)5Df@_pA0Hs=qRHb,BE<SLOi%chKDdi[6);nj&M%`3N?)n5qqoN&nF?Wg=5C4:]Odt$g,(59!Zc$^Ghp:
%7HK$+dg#r:CqZ8%7k@Jk2>'-jl,7>V;a5-TlFG=R339S0[gD3BQ1EC@*)!$j,Wka*2X#2%Xe(h@n82dfji&ju:kah,)pAQ"Q`LQP
%8&CpF8+MR\qePM[gt,2K*ChqI8$Ap^&GXZp*[%sj\,M?4S(E[9$g3Wd2oNP>n;tCT]Z$=B2).e1eMDKh?.&-;aCgNIc,)+!RAfik
%GG15cRB=&c?(@A5D^KHumerRQ\h^2Ue0rRCo])rKS@',NXX,p6A7^4Wg=D65S<h4ogo;lYnEkLms'P5K(+Ch\.DNU86LUMZWkPd2
%`W<Rs'N*B*.MqI90ThR$3RF)UZ(mP1mabcSN)UI:hB#lW/0:P4%Jf?-8lbYHP+dgp)DKM,g0Z:_!m_puM.\(ESk4*[nYM7jk+^?q
%`-(Uoehb/@B2YM%]Y@3jOhO8LnnHT0]b+%W]7E;pJlDKN9V#g%<XX(D/`5`sXRL5-dGW'iS&P;/lmc'Umn_[Y3&k8jChD/XX<0T&
%S(QM'A#lA/QY`N%KBRUn\ZfkdOe34(q^WmJ%HZ5uCXCt`V!Fgabmj.+GW!ar'k?EV-J<H&0GS$Dm>mIPFF?oQRapFl]%1ThO/$K*
%WT25tcN..km/(kP7Ri$[GIq2,c`'cmPu##h6*pj;KliP(,!d]TjXhlcqqGfn@"3%H/4p=NBX(B7mZ%l;.&RIm<c<K!l=/n`+JmR7
%Y?iq"nAr[F'.alCMAdc1Eh)(([t$S0ZdjDI0<W[P9*[PdGXCQ1,,h-B'OZcCa%7sbKKELQfm.j&U-G>*J3d'&mTHgX_bjoS-Z4W8
%U^#c0Gc3l`:CHih><tUHk!2#=Da!S2AK#7q4mSF]WRNd-,=?@)oN`UNTpA>E;D"q,;pkrPms*=4Nk'l,]buZnVKsaj=dC#QgSalP
%r&ESYh&sQc:I%,E\16p3WOp6=DG,J*PpEZSFA]M):ob7dbj`8*PBf0*U2ff8lhkgr7f;(&ptYtc9FN4&`cr/F'8ciDk@ogQ*i^pW
%.[sJ15,;Io[K7:JQ>'73-'Q$Tc@-gK+S"6cSYAi:B:&,sa>YX;BmA4pBVRIfPW@bf@LV!dUOrERC)QIdhl.MmU#dp=A`pXa!\]&e
%k8"15e=D`KMdj)ha!<Tj*Wm2;IMHXQJpL5M+-@%ZL'[L2l[Bku/j5.moSm;2Dsr)p,L#3[:W@fB^[<eS!_4X0V<41Z+o61Yp,]K*
%V^:QIN%M$UB3pKi/@$#:r0NpKY@>Dspo)J5NMi2bT-^C6rTa9e192_C3A9=RZ<H>8X[YsTpp+C'n+Q*"obFIM3]J#P=G>,TVTu/*
%T&"5J2E!^S]]i_=n[1#*!^u(8d\OuMNI=i?n2-reNa.4/U+`/`@ubeTBB0ll0:jt-RVpGK_44IS8&pJL;<I7elI>GIkEFnHdmA:S
%ZFOrpGh)R/MRE;p5<BN;50B]h^I5G7"HIi%f]s7i.7M#\es&2V8E]0<%&B$=[:Y]&iYEk^fkWjL`Go<h<lFI6F6u+*M+H]qo2dZZ
%'HZ;*$f`E0=6_9]PR!sP79@Uf4@51/Yi0n2EUQLV:7VI[;\j3`eB6cQ;![GJ-S7(V%?ApDMU$jRUO/+qgW9J5i@-au8Z!1?oc,2W
%,`+XGI5mk%:[ke?ed"T]V_<`rRuSF.U?jI7j/:Y_n@kfIYOIe3k'=(K:f-om39D)1Ole<14Et!,guXo,+^4&PYiq`H,<1bL6sR0M
%T.]>QF%"]%3='O9BNH8.Cp\dXmKlA;Js@%dZC);%]`NU*18A+[L@VOW,t9POG9Uj?m9Z&hXsUX*=N"LB6M.Y'fssA"\>JK^)-B9=
%mdR`k/>/W`KnlD9MP$T<J@^@Q:JE74K6V:X*0IX:>13gG'hg3V-!Ei/Dp2\?4n?/<?'Htn6#^`694,pA4nYD&3a7FBNc+:H3fN#/
%;^XK9a%U13n(6nFMu!>?J,d,&rpCm*^]![Us8N#Hs8Dl]O$A(Or:&#srTWKpq=UZcps5R^rVc3aoXCIlkN?bJrT,[F8c/=u56(9B
%:VZo,\,ZHnY<RO6gRnNB^M;/W`XdOniK+$2&&8/#rr^PL!8[~>
%AI9_PrivateDataEnd
